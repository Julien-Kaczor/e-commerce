"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_testing_library_1 = require("react-testing-library");
const _1 = require(".");
describe("useURLState", () => {
    afterEach(react_testing_library_1.cleanup);
    it("should take the initial state by default", () => __awaiter(this, void 0, void 0, function* () {
        const decoder = () => undefined;
        const getSearch = () => "";
        const replaceState = () => null;
        const getPathname = () => "";
        const getHash = () => "";
        const Counter = () => {
            const [count, setCount] = _1.useURLState("count", 0, decoder, {
                getSearch,
                replaceState,
                getPathname,
                getHash,
            });
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("h1", { "data-testid": "count" }, count),
                react_1.default.createElement("button", { "data-testid": "up", onClick: () => setCount(count + 1), children: "up" }),
                react_1.default.createElement("button", { "data-testid": "down", onClick: () => setCount(count - 1), children: "down" })));
        };
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(Counter, null));
        expect(getByTestId("count").textContent).toEqual("0");
    }));
    it("should take the value from the url if provided", () => {
        const decoder = (i) => +i;
        const getSearch = () => "?count=42";
        const replaceState = () => null;
        const getPathname = () => "";
        const getHash = () => "";
        const Counter = () => {
            const [count, setCount] = _1.useURLState("count", 0, decoder, {
                getSearch,
                replaceState,
                getPathname,
                getHash,
            });
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("h1", { "data-testid": "count" }, count),
                react_1.default.createElement("button", { "data-testid": "up", onClick: () => setCount(count + 1), children: "up" }),
                react_1.default.createElement("button", { "data-testid": "down", onClick: () => setCount(count - 1), children: "down" })));
        };
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(Counter, null));
        expect(getByTestId("count").textContent).toEqual("42");
    });
    it("should take the initial state if the search param is not valid", () => {
        const decoder = () => undefined;
        const getSearch = () => "?count=42";
        const replaceState = () => null;
        const getPathname = () => "";
        const getHash = () => "";
        const Counter = () => {
            const [count, setCount] = _1.useURLState("count", 0, decoder, {
                getSearch,
                replaceState,
                getPathname,
                getHash,
            });
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("h1", { "data-testid": "count" }, count),
                react_1.default.createElement("button", { "data-testid": "up", onClick: () => setCount(count + 1), children: "up" }),
                react_1.default.createElement("button", { "data-testid": "down", onClick: () => setCount(count - 1), children: "down" })));
        };
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(Counter, null));
        expect(getByTestId("count").textContent).toEqual("0");
    });
    it("should call replaceState on state change", () => __awaiter(this, void 0, void 0, function* () {
        const decoder = () => undefined;
        const getSearch = () => "";
        const replaceState = jest.fn();
        const getPathname = () => "http://myapp.com";
        const getHash = () => "";
        const Counter = () => {
            const [count, setCount] = _1.useURLState("count", 0, decoder, {
                getSearch,
                replaceState,
                getPathname,
                getHash,
            });
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("h1", { "data-testid": "count" }, count),
                react_1.default.createElement("button", { "data-testid": "up", onClick: () => setCount(count + 1), children: "up" }),
                react_1.default.createElement("button", { "data-testid": "down", onClick: () => setCount(count - 1), children: "down" })));
        };
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(Counter, null));
        react_testing_library_1.fireEvent.click(getByTestId("up"));
        yield react_testing_library_1.wait(() => expect(replaceState).toBeCalledTimes(2));
        expect(getByTestId("count").textContent).toEqual("1");
        expect(replaceState).toBeCalledWith({}, "", "http://myapp.com?count=1");
    }));
    it("should not erase previous search params", () => __awaiter(this, void 0, void 0, function* () {
        const decoder = () => undefined;
        const getSearch = () => "?please=keepme";
        const replaceState = jest.fn();
        const getPathname = () => "http://myapp.com";
        const getHash = () => "";
        const Counter = () => {
            const [count, setCount] = _1.useURLState("count", 0, decoder, {
                getSearch,
                replaceState,
                getPathname,
                getHash,
            });
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("h1", { "data-testid": "count" }, count),
                react_1.default.createElement("button", { "data-testid": "up", onClick: () => setCount(count + 1), children: "up" }),
                react_1.default.createElement("button", { "data-testid": "down", onClick: () => setCount(count - 1), children: "down" })));
        };
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(Counter, null));
        react_testing_library_1.fireEvent.click(getByTestId("up"));
        react_testing_library_1.fireEvent.click(getByTestId("up"));
        yield react_testing_library_1.wait(() => expect(replaceState).toBeCalledTimes(3));
        expect(getByTestId("count").textContent).toEqual("2");
        expect(replaceState).toBeCalledWith({}, "", "http://myapp.com?please=keepme&count=2");
    }));
    it("should not erase the hash", () => __awaiter(this, void 0, void 0, function* () {
        const decoder = () => undefined;
        const getSearch = () => "?please=keepme";
        const replaceState = jest.fn();
        const getPathname = () => "http://myapp.com";
        const getHash = () => "#myHash";
        const Counter = () => {
            const [count, setCount] = _1.useURLState("count", 0, decoder, {
                getSearch,
                replaceState,
                getPathname,
                getHash,
            });
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("h1", { "data-testid": "count" }, count),
                react_1.default.createElement("button", { "data-testid": "up", onClick: () => setCount(count + 1), children: "up" }),
                react_1.default.createElement("button", { "data-testid": "down", onClick: () => setCount(count - 1), children: "down" })));
        };
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(Counter, null));
        react_testing_library_1.fireEvent.click(getByTestId("up"));
        react_testing_library_1.fireEvent.click(getByTestId("up"));
        yield react_testing_library_1.wait(() => expect(replaceState).toBeCalledTimes(3));
        expect(getByTestId("count").textContent).toEqual("2");
        expect(replaceState).toBeCalledWith({}, "", "http://myapp.com?please=keepme&count=2#myHash");
    }));
    it("should deal with complex object", () => __awaiter(this, void 0, void 0, function* () {
        const decoder = () => undefined;
        const getSearch = () => "";
        const replaceState = jest.fn();
        const getPathname = () => "http://myapp.com";
        const getHash = () => "";
        const DatePicker = () => {
            const [dateRange, setDateRange] = _1.useURLState("dateRange", {}, decoder, {
                getSearch,
                replaceState,
                getPathname,
                getHash,
            });
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("h1", { "data-testid": "date" },
                    dateRange.start,
                    " -> ",
                    dateRange.end),
                react_1.default.createElement("button", { "data-testid": "set-start", onClick: () => setDateRange(Object.assign({}, dateRange, { start: "17-01-2019" })) }),
                react_1.default.createElement("button", { "data-testid": "set-end", onClick: () => setDateRange(Object.assign({}, dateRange, { end: "01-02-2019" })) })));
        };
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(DatePicker, null));
        expect(getByTestId("date").textContent).toEqual(" -> ");
        react_testing_library_1.fireEvent.click(getByTestId("set-start"));
        expect(getByTestId("date").textContent).toEqual("17-01-2019 -> ");
        react_testing_library_1.fireEvent.click(getByTestId("set-end"));
        expect(getByTestId("date").textContent).toEqual("17-01-2019 -> 01-02-2019");
        yield react_testing_library_1.wait(() => expect(replaceState).toBeCalledTimes(3));
        expect(replaceState).toBeCalledWith({}, "", "http://myapp.com");
        expect(replaceState).toBeCalledWith({}, "", "http://myapp.com?dateRange%5Bstart%5D=17-01-2019");
        expect(replaceState).toBeCalledWith({}, "", "http://myapp.com?dateRange%5Bstart%5D=17-01-2019&dateRange%5Bend%5D=01-02-2019");
    }));
    it("should not add `?` to the url if no param", () => __awaiter(this, void 0, void 0, function* () {
        const decoder = () => undefined;
        const getSearch = () => "";
        const replaceState = jest.fn();
        const getPathname = () => "http://myapp.com";
        const getHash = () => "";
        const DatePicker = () => {
            const [dateRange, setDateRange] = _1.useURLState("dateRange", {}, decoder, {
                getSearch,
                replaceState,
                getPathname,
                getHash,
            });
            return (react_1.default.createElement(react_1.default.Fragment, null,
                react_1.default.createElement("h1", { "data-testid": "date" },
                    dateRange.start,
                    " -> ",
                    dateRange.end),
                react_1.default.createElement("button", { "data-testid": "set-start", onClick: () => setDateRange(Object.assign({}, dateRange, { start: "17-01-2019" })) }),
                react_1.default.createElement("button", { "data-testid": "set-end", onClick: () => setDateRange(Object.assign({}, dateRange, { end: "01-02-2019" })) })));
        };
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(DatePicker, null));
        expect(getByTestId("date").textContent).toEqual(" -> ");
        yield react_testing_library_1.wait(() => expect(replaceState).toBeCalledTimes(1));
        expect(replaceState).toBeCalledWith({}, "", "http://myapp.com");
    }));
});
//# sourceMappingURL=useURLState.test.js.map