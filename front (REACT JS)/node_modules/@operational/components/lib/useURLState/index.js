"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const noop_1 = __importDefault(require("lodash/noop"));
const qs_1 = __importDefault(require("qs"));
const react_1 = require("react");
const isClient_1 = require("../utils/isClient");
/**
 * Bunch of method that depends on `window`
 *
 * This is mostly for testing purpose but can also be used for SSR.
 */
const options = isClient_1.isClient()
    ? {
        getSearch: () => window.location.search,
        getHash: () => window.location.hash,
        getPathname: () => window.location.pathname,
        replaceState: window.history.replaceState.bind(window.history),
    }
    : {
        getSearch: noop_1.default,
        getHash: noop_1.default,
        getPathname: noop_1.default,
        replaceState: noop_1.default,
    };
/**
 * Parse the search to object.
 *
 * @param search
 */
const getSearchParams = (search) => qs_1.default.parse(search.replace("?", "")) || {};
/**
 * Create a state that is sync with url search param.
 *
 * @param name Name of your state
 * @param decoder Validate and decode the value from the url
 * @param options `window` dependent methods
 */
exports.useURLState = (name, initialValue, decoder = val => val, { getHash, getPathname, replaceState, getSearch } = options) => {
    // Retrieve the value from the url search param
    const searchValue = getSearchParams(getSearch() || "")[name];
    // Check if the value is valid, regarding the validator
    const encodedValue = decoder(searchValue);
    // Set the initial value
    const [value, setValue] = react_1.useState(encodedValue !== undefined ? encodedValue : initialValue);
    // Update the url search param on state update
    react_1.useEffect(() => {
        const params = getSearchParams(getSearch() || "");
        params[name] = value;
        const search = `?${qs_1.default.stringify(params)}`;
        replaceState({}, "", `${getPathname()}${search === "?" ? "" : search}${getHash()}`);
    }, [value]);
    return [value, setValue];
};
//# sourceMappingURL=index.js.map