"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_beautiful_dnd_1 = require("react-beautiful-dnd");
const styled_1 = __importDefault(require("../utils/styled"));
const ChildTree_1 = __importDefault(require("./ChildTree"));
const Container = styled_1.default("div") `
  user-select: none;
  & & {
    margin-left: ${({ theme }) => theme.space.content}px;
  }
`;
const Tree = ({ trees, droppableProps, placeholder }) => {
    const isLowestLevel = trees.length === 0 || trees.some(tree => !tree.childNodes || !tree.childNodes.length);
    /**
     * If this is a category with children, no drag and drop
     * because only children can be dragged/sorted.
     */
    if (!isLowestLevel || !droppableProps) {
        return (React.createElement(Container, null, trees.map((treeData, index) => (React.createElement(ChildTree_1.default, Object.assign({ key: index }, treeData))))));
    }
    return (React.createElement(react_beautiful_dnd_1.Droppable, Object.assign({}, droppableProps), (droppableProvided, droppableSnapshot) => (React.createElement(Container, Object.assign({ ref: droppableProvided.innerRef }, droppableProvided.droppableProps),
        trees.length ? (React.createElement(React.Fragment, null, trees.map((treeData, index) => (React.createElement(react_beautiful_dnd_1.Draggable, Object.assign({ key: index }, treeData.draggableProps || { draggableId: treeData.label }, { index: index }), draggableProvided => {
            return (React.createElement(ChildTree_1.default, Object.assign({ forwardRef: draggableProvided.innerRef }, treeData, draggableProvided.draggableProps, draggableProvided.dragHandleProps)));
        }))))) : (placeholder && React.createElement(placeholder, droppableSnapshot)),
        droppableProvided.placeholder))));
};
exports.default = Tree;
//# sourceMappingURL=Tree.js.map