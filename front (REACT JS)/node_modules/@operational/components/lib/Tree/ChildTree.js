"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Tree_1 = __importDefault(require("./Tree"));
const TreeItem_1 = __importStar(require("./TreeItem"));
const ChildTree = (_a) => {
    var { initiallyOpen, highlight, tag, label, color, disabled, forwardRef, childNodes = [], droppableProps, onClick, onRemove, cursor } = _a, props = __rest(_a, ["initiallyOpen", "highlight", "tag", "label", "color", "disabled", "forwardRef", "childNodes", "droppableProps", "onClick", "onRemove", "cursor"]);
    const [isOpen, setIsOpen] = React.useState(Boolean(initiallyOpen));
    const hasChildren = Boolean(childNodes && childNodes.length);
    const onNodeClick = !disabled && (hasChildren || onClick)
        ? (e) => {
            e.stopPropagation();
            if (hasChildren) {
                setIsOpen(!isOpen);
            }
            if (onClick) {
                onClick();
            }
        }
        : undefined;
    return (React.createElement(TreeItem_1.Container, Object.assign({ ref: forwardRef, disabled: Boolean(disabled), hasChildren: hasChildren }, props),
        React.createElement(TreeItem_1.default, { onNodeClick: onNodeClick, highlight: Boolean(highlight), hasChildren: hasChildren, isOpen: isOpen, tag: tag, label: label, color: color, onRemove: onRemove, cursor: cursor }),
        hasChildren && isOpen && React.createElement(Tree_1.default, { trees: childNodes, droppableProps: droppableProps })));
};
exports.default = ChildTree;
//# sourceMappingURL=ChildTree.js.map