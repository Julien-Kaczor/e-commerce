"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const NameTag_1 = __importDefault(require("../NameTag/NameTag"));
const utils_1 = require("../utils");
const styled_1 = __importDefault(require("../utils/styled"));
exports.Container = styled_1.default("div") `
  opacity: ${({ disabled }) => (disabled ? 0.5 : 1)};
  pointer-events: ${({ disabled }) => (disabled ? "none" : "inherit")};
  user-select: none;
  margin-bottom: -${({ theme }) => theme.space.base}px;
`;
const Header = styled_1.default("div") `
  label: TreeItem;
  display: flex;
  align-items: center;
  cursor: ${({ onClick, cursor }) => cursor || (onClick ? "pointer" : "inherit")};
  background-color: ${({ highlight, theme }) => (highlight ? theme.color.highlight : "none")};
  padding: ${({ theme }) => theme.space.base}px;
  border-radius: 2px;

  :hover {
    background-color: ${({ theme, highlight }) => highlight ? utils_1.darken(theme.color.highlight, 20) : theme.color.background.lighter};
  }
`;
const Label = styled_1.default("div") `
  overflow-wrap: break-word;
  font-size: ${({ theme }) => theme.font.size.fineprint}px;
  font-weight: ${({ theme, hasChildren }) => (hasChildren ? theme.font.weight.bold : theme.font.weight.medium)};
  color: ${({ theme }) => theme.color.text.dark};
`;
const DeleteNode = styled_1.default("div") `
  display: flex;
  align-items: center;
  justify-content: center;
  margin-left: auto;
  width: 14px;
  height: 14px;
  background-color: rgba(0, 0, 0, 0.05);
  color: ${({ theme }) => theme.color.text.lighter};
  cursor: pointer;

  :hover {
    background-color: rgba(0, 0, 0, 0.1);
  }
`;
const TreeIcon = styled_1.default(Icon_1.default) `
  margin-right: ${({ theme }) => theme.space.base}px;
`;
const TreeItem = ({ highlight, tag, label, color, onNodeClick, onRemove, hasChildren, isOpen, cursor, }) => (react_1.default.createElement(Header, { onClick: onNodeClick, highlight: Boolean(highlight), cursor: cursor },
    hasChildren && react_1.default.createElement(TreeIcon, { color: "color.text.lightest", size: 12, left: true, name: isOpen ? "ChevronDown" : "Add" }),
    !hasChildren && tag && (react_1.default.createElement(NameTag_1.default, { condensed: true, left: true, color: color }, tag)),
    react_1.default.createElement(Label, { hasChildren: hasChildren }, label),
    onRemove && (react_1.default.createElement(DeleteNode, { onClick: onRemove },
        react_1.default.createElement(Icon_1.default, { size: 12, name: "No" })))));
exports.default = TreeItem;
//# sourceMappingURL=TreeItem.js.map