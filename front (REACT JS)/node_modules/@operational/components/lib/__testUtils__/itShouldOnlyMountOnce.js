"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_testing_library_1 = require("react-testing-library");
/**
 * This calls the passed callback on every `componentDidMount`
 * This is how we track if the parent un-mounts.
 *
 */
function Child({ cb }) {
    react_1.default.useEffect(() => {
        cb();
    }, []);
    return react_1.default.createElement("div", null);
}
/**
 * We use this to re-render its child on every state change
 */
const Wrapper = ({ cb, Comp }) => {
    const [count, setCount] = react_1.default.useState(1);
    const handleClick = () => setCount(count + 1);
    return (react_1.default.createElement("div", null,
        react_1.default.createElement("button", { "data-testid": "triggerStateChange", onClick: handleClick }, "Increase"),
        react_1.default.createElement("input", { "data-testid": "verifyStateChange", value: count, readOnly: true }),
        react_1.default.createElement(Comp, null,
            react_1.default.createElement(Child, { cb: cb }))));
};
/**
 * A test hack to checks if a component does not re-mount on every render
 * Need this since we dont have access to life-cycle methods of the component we want to check,
 * we pass a child with a tracker because if the parent node un-mounts, all its children un-mount.
 *
 * Therefore, **we can only use this test for components that accept any children**.
 *
 *  ![TestHack](https://media1.tenor.com/images/7da78fe87cf5a457fbec3406e82d6cb3/tenor.gif)
 */
exports.itShouldOnlyMountOnce = (componentName, Component) => {
    const mockFn = jest.fn();
    afterEach(react_testing_library_1.cleanup);
    it(`[${componentName}] should only mount once`, () => {
        const w = react_testing_library_1.render(react_1.default.createElement(Wrapper, { cb: mockFn, Comp: Component }));
        // First Verify State Does Change
        expect(w.getByTestId("verifyStateChange").value).toEqual("1");
        react_testing_library_1.fireEvent.click(w.getByTestId("triggerStateChange"));
        // Input should now be 2
        expect(w.getByTestId("verifyStateChange").value).toEqual("2");
        // Now check that mockFN was only called once
        expect(mockFn).toHaveBeenCalledTimes(1);
    });
};
//# sourceMappingURL=itShouldOnlyMountOnce.js.map