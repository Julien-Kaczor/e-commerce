"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const react_testing_library_1 = require("react-testing-library");
const _1 = require(".");
describe("useHotkey", () => {
    afterEach(react_testing_library_1.cleanup);
    it("triggers the callback function on keyDown event", () => __awaiter(this, void 0, void 0, function* () {
        const callback = jest.fn();
        const Component = () => {
            const ref = react_1.useRef(null);
            _1.useHotkey(ref, { key: "t" }, callback);
            return react_1.default.createElement("input", { ref: ref, "data-testid": "component" });
        };
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(Component, null));
        const rendered = getByTestId("component");
        react_testing_library_1.fireEvent.keyDown(rendered, { key: "t" });
        expect(callback).toBeCalledTimes(1);
    }));
    it("keydown registering is case-insensitive", () => __awaiter(this, void 0, void 0, function* () {
        const callbackP = jest.fn();
        const callbackD = jest.fn();
        const Component = () => {
            const ref = react_1.useRef(null);
            _1.useHotkey(ref, { key: "P" }, callbackP);
            _1.useHotkey(ref, { key: "d" }, callbackD);
            return react_1.default.createElement("div", { ref: ref, "data-testid": "component" });
        };
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(Component, null));
        const rendered = getByTestId("component");
        react_testing_library_1.fireEvent.keyDown(rendered, { key: "P" });
        react_testing_library_1.fireEvent.keyDown(rendered, { key: "p" });
        react_testing_library_1.fireEvent.keyDown(rendered, { key: "D" });
        react_testing_library_1.fireEvent.keyDown(rendered, { key: "d" });
        expect(callbackP).toBeCalledTimes(2);
        expect(callbackD).toBeCalledTimes(2);
    }));
    it("handles key modifiers", () => __awaiter(this, void 0, void 0, function* () {
        const callbackCtrl = jest.fn();
        const callbackShift = jest.fn();
        const callbackAlt = jest.fn();
        const callbackMeta = jest.fn();
        const callbackAll = jest.fn();
        const Component = () => {
            const ref = react_1.useRef(null);
            _1.useHotkey(ref, { key: "o", ctrl: true }, callbackCtrl);
            _1.useHotkey(ref, { key: "o", shift: true }, callbackShift);
            _1.useHotkey(ref, { key: "o", alt: true }, callbackAlt);
            _1.useHotkey(ref, { key: "o", meta: true }, callbackMeta);
            _1.useHotkey(ref, { key: "o", ctrl: true, shift: true, alt: true, meta: true }, callbackAll);
            return react_1.default.createElement("input", { ref: ref, "data-testid": "component" });
        };
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(Component, null));
        const rendered = getByTestId("component");
        // No reaction to event without key modifiers
        react_testing_library_1.fireEvent(rendered, new KeyboardEvent("keydown", { key: "o" }));
        expect(callbackCtrl).toBeCalledTimes(0);
        expect(callbackShift).toBeCalledTimes(0);
        expect(callbackAlt).toBeCalledTimes(0);
        expect(callbackMeta).toBeCalledTimes(0);
        expect(callbackAll).toBeCalledTimes(0);
        // Ctrl
        react_testing_library_1.fireEvent(rendered, new KeyboardEvent("keydown", { key: "o", ctrlKey: true }));
        expect(callbackCtrl).toBeCalledTimes(1);
        expect(callbackShift).toBeCalledTimes(0);
        expect(callbackAlt).toBeCalledTimes(0);
        expect(callbackMeta).toBeCalledTimes(0);
        expect(callbackAll).toBeCalledTimes(0);
        // Shift
        react_testing_library_1.fireEvent(rendered, new KeyboardEvent("keydown", { key: "o", shiftKey: true }));
        expect(callbackCtrl).toBeCalledTimes(1);
        expect(callbackShift).toBeCalledTimes(1);
        expect(callbackAlt).toBeCalledTimes(0);
        expect(callbackMeta).toBeCalledTimes(0);
        expect(callbackAll).toBeCalledTimes(0);
        // Alt
        react_testing_library_1.fireEvent(rendered, new KeyboardEvent("keydown", { key: "o", altKey: true }));
        expect(callbackCtrl).toBeCalledTimes(1);
        expect(callbackShift).toBeCalledTimes(1);
        expect(callbackAlt).toBeCalledTimes(1);
        expect(callbackMeta).toBeCalledTimes(0);
        expect(callbackAll).toBeCalledTimes(0);
        // Meta
        react_testing_library_1.fireEvent(rendered, new KeyboardEvent("keydown", { key: "o", metaKey: true }));
        expect(callbackCtrl).toBeCalledTimes(1);
        expect(callbackShift).toBeCalledTimes(1);
        expect(callbackAlt).toBeCalledTimes(1);
        expect(callbackMeta).toBeCalledTimes(1);
        expect(callbackAll).toBeCalledTimes(0);
        // All modifiers together
        react_testing_library_1.fireEvent(rendered, new KeyboardEvent("keydown", { key: "o", ctrlKey: true, shiftKey: true, altKey: true, metaKey: true }));
        expect(callbackCtrl).toBeCalledTimes(2);
        expect(callbackShift).toBeCalledTimes(2);
        expect(callbackAlt).toBeCalledTimes(2);
        expect(callbackMeta).toBeCalledTimes(2);
        expect(callbackAll).toBeCalledTimes(1);
    }));
});
//# sourceMappingURL=useHotkey.test.js.map