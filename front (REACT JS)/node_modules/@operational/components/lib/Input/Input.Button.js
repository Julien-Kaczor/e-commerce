"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_copy_to_clipboard_1 = __importDefault(require("react-copy-to-clipboard"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const OperationalContext_1 = __importDefault(require("../OperationalContext/OperationalContext"));
const utils_1 = require("../utils");
const styled_1 = __importDefault(require("../utils/styled"));
const Input_constants_1 = require("./Input.constants");
const Button = styled_1.default("button") `
  width: ${Input_constants_1.height}px;
  /** Makes sure the button doesn't shrink when inside a flex container */
  flex: 0 0 ${Input_constants_1.height}px;
  height: ${Input_constants_1.height}px;
  top: 0px;
  left: 0px;
  display: flex;
  align-items: center;
  justify-content: center;
  cursor: pointer;

  :focus {
    ${utils_1.inputFocus}
    border: 1px solid ${({ theme }) => theme.color.primary};
  }

  /* Don't respond to children's pointer-events */
  * {
    pointer-events: none;
  }
  ${({ theme }) => `
    background-color: ${theme.color.background.lighter};
    border-top-left-radius: ${theme.borderRadius}px;
    border-bottom-left-radius: ${theme.borderRadius}px;
    border: 1px solid;
    border-color: ${theme.color.border.default};
    color: ${theme.color.text.light};
    &:hover {
      background-color: ${theme.color.background.light};
    }
  `};
`;
const InputButton = ({ tabIndex, icon, copy, value, onIconClick }) => {
    if (!icon && !copy) {
        return null;
    }
    return copy === true ? (React.createElement(OperationalContext_1.default, null, ({ pushMessage }) => (React.createElement(react_copy_to_clipboard_1.default, { text: value || "", onCopy: () => pushMessage({ body: "Copied to clipboard", type: "info" }) },
        React.createElement(Button, { tabIndex: tabIndex },
            React.createElement(Icon_1.default, { name: "Copy", size: 16 })))))) : (React.createElement(Button, { onClick: onIconClick }, typeof icon === "string" ? React.createElement(Icon_1.default, { name: icon, size: 16 }) : icon));
};
exports.default = InputButton;
//# sourceMappingURL=Input.Button.js.map