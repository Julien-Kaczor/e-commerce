"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const utils_1 = require("../utils");
const styled_1 = __importDefault(require("../utils/styled"));
const Input_Button_1 = __importDefault(require("./Input.Button"));
const Input_constants_1 = require("./Input.constants");
const width = 360;
const Container = styled_1.default("div") `
  position: relative;
  align-items: center;
  justify-content: center;
  display: inline-flex;
  width: 100%;
  max-width: ${({ fullWidth }) => (fullWidth ? "none" : `${width}px`)};
`;
const Field = styled_1.default("input")(({ theme, disabled, isError, withIconButton, preset, clear }) => {
    const makeBackgroundColor = () => {
        if (disabled) {
            return theme.color.disabled;
        }
        if (preset) {
            return utils_1.setAlpha(0.1)(theme.color.primary);
        }
        return theme.color.white;
    };
    return Object.assign({}, (withIconButton
        ? { borderTopRightRadius: theme.borderRadius, borderBottomRightRadius: theme.borderRadius, marginLeft: -1 }
        : { borderRadius: theme.borderRadius }), { fontSize: theme.font.size.body, width: "100%", height: Input_constants_1.height, label: "input", flexGrow: 1, padding: `${theme.space.small}px ${theme.space.medium}px`, opacity: disabled ? 0.6 : 1.0, font: "inherit", border: "1px solid", borderColor: isError ? theme.color.error : theme.color.border.default, appearance: "none", fontWeight: preset ? theme.font.weight.medium : theme.font.weight.regular, color: preset ? theme.color.text.dark : theme.color.text.default, backgroundColor: makeBackgroundColor(), "::placeholder": {
            color: theme.color.text.disabled,
        } }, (clear ? { paddingRight: 40 } : {}), { "&:focus": utils_1.inputFocus({
            theme,
            isError,
        }) });
});
const ClearButton = styled_1.default("div") `
  position: absolute;
  top: 0; /* anchor the position to the top so the browser doesn't guess */
  right: 0; /* not 12px but 0 because we want a _box_ to attach to the end of Input and not just an X pushed in from the right */

  /* We also probably should specify the dimensions of this box */
  width: ${Input_constants_1.height}px;
  height: ${Input_constants_1.height}px;

  /* Also, let's center the contents of this box */
  display: flex;
  align-items: center;
  justify-content: center;

  cursor: pointer; /* Let the user know this is clickable */

  /* We want the user to click on thix _box_, not the icon inside it */
  > svg {
    pointer-events: none;
  }
`;
const InputField = (_a) => {
    var { id, hint, fullWidth, inputRef, autoFocus, name, autoComplete, disabled, value, type, onFocus, onBlur, placeholder, error, onChange, preset, label, clear, icon, copy, onIconClick, tabIndex, errorComponent: ErrorComponent } = _a, props = __rest(_a, ["id", "hint", "fullWidth", "inputRef", "autoFocus", "name", "autoComplete", "disabled", "value", "type", "onFocus", "onBlur", "placeholder", "error", "onChange", "preset", "label", "clear", "icon", "copy", "onIconClick", "tabIndex", "errorComponent"]);
    const shouldShowIconButton = Boolean(icon) || Boolean(copy);
    const renderButton = () => {
        if (copy === true) {
            return React.createElement(Input_Button_1.default, { tabIndex: tabIndex, value: value || "", copy: copy });
        }
        else {
            return React.createElement(Input_Button_1.default, { tabIndex: tabIndex, onIconClick: onIconClick, icon: icon, copy: false });
        }
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Container, { fullWidth: fullWidth, withLabel: Boolean(label) },
            shouldShowIconButton && renderButton(),
            React.createElement(Field, Object.assign({ ref: inputRef, autoFocus: autoFocus, name: name, disabled: Boolean(disabled), value: value || "", type: type, onFocus: onFocus, onBlur: onBlur, placeholder: placeholder, isError: Boolean(error), onChange: (ev) => {
                    if (onChange) {
                        onChange(ev.currentTarget.value);
                    }
                }, clear: clear, preset: Boolean(preset), id: `input-field-${id}`, withIconButton: shouldShowIconButton, autoComplete: autoComplete }, props)),
            clear && value && (React.createElement(ClearButton, { onClick: clear },
                React.createElement(Icon_1.default, { color: "color.text.lightest", name: "No" }))),
            error && !ErrorComponent ? React.createElement(utils_1.FormFieldError, null, error) : null),
        error && ErrorComponent ? React.createElement(ErrorComponent, { errorMessage: error }) : null));
};
exports.default = InputField;
//# sourceMappingURL=Input.Field.js.map