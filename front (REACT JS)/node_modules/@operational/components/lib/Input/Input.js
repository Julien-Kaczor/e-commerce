"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Hint_1 = __importDefault(require("../Hint/Hint"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const LabelText_1 = require("../LabelText/LabelText");
const useUniqueId_1 = require("../useUniqueId");
const mixins_1 = require("../utils/mixins");
const Input_Field_1 = __importDefault(require("./Input.Field"));
const Input = (_a) => {
    var { id, tabIndex, fullWidth, label, labelId, hint, onToggle, disabled, errorComponent } = _a, props = __rest(_a, ["id", "tabIndex", "fullWidth", "label", "labelId", "hint", "onToggle", "disabled", "errorComponent"]);
    const uniqueId = useUniqueId_1.useUniqueId(id);
    const Field = (React.createElement(Input_Field_1.default, Object.assign({ hint: hint, tabIndex: tabIndex, label: label, id: uniqueId, fullWidth: fullWidth, disabled: disabled, "aria-labelledby": label ? `input-label-${uniqueId}` : undefined, "aria-describedby": hint ? `input-hint-${uniqueId}` : undefined, "aria-label": label, errorComponent: errorComponent }, props)));
    if (label) {
        return (React.createElement(mixins_1.Label, { fullWidth: fullWidth, id: uniqueId ? `input-label-${uniqueId}` : `input-label-${label}` },
            React.createElement(LabelText_1.LabelText, null, label),
            (hint || onToggle) && (React.createElement(mixins_1.FormFieldControls, null,
                hint && React.createElement(Hint_1.default, { textId: `input-hint-${uniqueId}` }, hint),
                onToggle && (React.createElement(mixins_1.FormFieldControl, { onClick: () => {
                        if (onToggle) {
                            onToggle();
                        }
                    } },
                    React.createElement(Icon_1.default, { name: disabled ? "Lock" : "Unlock", size: 12 }))))),
            Field));
    }
    return Field;
};
exports.default = Input;
//# sourceMappingURL=Input.js.map