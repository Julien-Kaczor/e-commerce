"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const useWindowSize_1 = __importDefault(require("../useWindowSize"));
const styled_1 = __importDefault(require("../utils/styled"));
const Tooltip_Container_1 = __importDefault(require("./Tooltip.Container"));
const getPosition = (props) => {
    let position = "right";
    if (props.left) {
        position = "left";
    }
    if (props.right) {
        position = "right";
    }
    if (props.bottom) {
        position = "bottom";
    }
    if (props.top) {
        position = "top";
    }
    return position;
};
const getDisplayPosition = (windowSize, state, props) => {
    let position = getPosition(props);
    /** Swap the positions of tooltips in case they are clipped in this particular viewport */
    if (props.smart) {
        if (state.bbLeft < 0 && position === "left") {
            position = "right";
        }
        if (state.bbTop < 0 && position === "top") {
            position = "bottom";
        }
        if (state.bbRight > windowSize.width && position === "right") {
            position = "left";
        }
        if (state.bbBottom > windowSize.height && position === "bottom") {
            position = "top";
        }
    }
    return position;
};
/*
 * This class name is used as a selector when customizing the opacity for tooltips
 * that are only displayed when a particular parent of theirs is hovered.
 * The pattern replaces the https://emotion.sh/docs/babel#components-as-selectors
 * pattern to remove the need for babel plugin dependancy in projects that rely on
 * this library.
 */
exports.dangerousTooltipContainerClassName = "operational-ui-tooltip";
const SizeRestriction = styled_1.default("div") `
  max-height: 80vh;
  max-width: 80vw;
  overflow: auto;
  width: fit-content;
  height: 100%;

  img {
    max-width: 100%;
  }

  p {
    font-size: ${({ theme }) => theme.font.size.tiny}px;
    line-height: 1.3;
    margin: 0;
    padding: 2px 6px;
    text-align: center;
  }
`;
const Tooltip = props => {
    const containerNode = React.useRef(null);
    const offScreenWidthTestNode = React.useRef(null);
    const [state, setState] = React.useState({
        bbTop: 0,
        bbLeft: 0,
        bbRight: 0,
        bbBottom: 0,
        singleLineTextWidth: 0,
    });
    React.useEffect(() => {
        if (!offScreenWidthTestNode.current || !containerNode.current) {
            return;
        }
        const bbOffScreen = offScreenWidthTestNode.current.getBoundingClientRect();
        const bbRect = containerNode.current.getBoundingClientRect();
        setState({
            bbTop: bbRect.top,
            bbBottom: bbRect.bottom,
            bbLeft: bbRect.left,
            bbRight: bbRect.right,
            singleLineTextWidth: bbOffScreen.width,
        });
    }, []);
    const windowSize = useWindowSize_1.default();
    const displayPosition = getDisplayPosition(windowSize, state, props);
    return (React.createElement(React.Fragment, null,
        React.createElement(Tooltip_Container_1.default, { position: "bottom", offScreenWidthTest: true, singleLineTextWidth: state.singleLineTextWidth, ref: offScreenWidthTestNode },
            React.createElement("p", null, props.children)),
        React.createElement(Tooltip_Container_1.default, { role: "tooltip", className: exports.dangerousTooltipContainerClassName, singleLineTextWidth: state.singleLineTextWidth, position: displayPosition, ref: containerNode },
            React.createElement(SizeRestriction, null,
                React.createElement("p", { id: props.textId }, props.children)))));
};
exports.default = Tooltip;
//# sourceMappingURL=Tooltip.js.map