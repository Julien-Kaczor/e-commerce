"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_testing_library_1 = require("react-testing-library");
const _1 = __importStar(require("."));
// ref https://github.com/Hermanya/use-interval/blob/master/src/test.tsx
beforeEach(react_testing_library_1.cleanup);
const MyComponent = ({ fn, delay, immediate, }) => {
    _1.default(fn, delay, immediate);
    return react_1.default.createElement("span", null, "An Interval is running ");
};
describe("useInterval", () => {
    it("exports a function (default)", () => {
        expect(_1.default).toBeInstanceOf(Function);
    });
    it("exports a function (named)", () => {
        expect(_1.useInterval).toBeInstanceOf(Function);
    });
    it("hooks identity are the same", () => {
        expect(_1.default).toBe(_1.useInterval);
    });
    it("is a named function", () => {
        // aids stack trace debugging.
        expect(_1.default.name).toBe("useInterval");
    });
    describe("regular mode (delayed)", () => {
        jest.useFakeTimers();
        const fn = jest.fn();
        const { container } = react_testing_library_1.render(react_1.default.createElement(MyComponent, { fn: fn, delay: 500 }));
        expect(fn).toBeCalledTimes(0 /* not called on first render */);
        jest.advanceTimersByTime(500);
        expect(fn).toBeCalledTimes(1);
        jest.advanceTimersByTime(1500);
        expect(fn).toBeCalledTimes(4);
        test("cancels interval when delay is null", () => {
            react_testing_library_1.render(react_1.default.createElement(MyComponent, { immediate: true, fn: fn, delay: null }), { container });
            jest.advanceTimersByTime(1500);
            expect(fn).toBeCalledTimes(4);
        });
        jest.clearAllTimers();
    });
    describe("immediate mode", () => {
        jest.useFakeTimers();
        const fn = jest.fn();
        const { container } = react_testing_library_1.render(react_1.default.createElement(MyComponent, { immediate: true, fn: fn, delay: 500 }));
        expect(fn).toBeCalledTimes(1 /* called immediatelly on render */);
        jest.advanceTimersByTime(500);
        expect(fn).toBeCalledTimes(2);
        jest.advanceTimersByTime(1500);
        expect(fn).toBeCalledTimes(5);
        it("cancels interval when delay is null", () => {
            react_testing_library_1.render(react_1.default.createElement(MyComponent, { immediate: true, fn: fn, delay: null }), { container });
            jest.advanceTimersByTime(1500);
            expect(fn).toBeCalledTimes(5);
        });
        jest.clearAllTimers();
    });
});
//# sourceMappingURL=useInterval.test.js.map