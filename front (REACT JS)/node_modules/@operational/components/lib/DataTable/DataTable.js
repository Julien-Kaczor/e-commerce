"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_window_1 = require("react-window");
const Message_1 = __importDefault(require("../Internals/Message/Message"));
const truncate_1 = require("../utils/truncate");
const DataTable_styled_1 = require("./DataTable.styled");
const DataTable_util_1 = require("./DataTable.util");
function DataTable({ columns, rows, rowHeight: initialRowHeight = DataTable_util_1.defaultRowHeight, footer = null, height = 500, width = "100%", cellWidth = "1fr", maxCharactersInCell = 30, className, }) {
    if (rows.length && rows[0].length !== columns.length) {
        return (React.createElement(Message_1.default, { color: "error" },
            "Invalid data: `rows` have different cardinality (",
            rows[0].length,
            ") than `columns` (",
            columns.length,
            "). Please check both props and try again."));
    }
    const rowHeight = React.useMemo(() => DataTable_util_1.getRowHeight(initialRowHeight), [initialRowHeight]);
    const Table = React.useMemo(() => React.memo((_a) => {
        var { children } = _a, rest = __rest(_a, ["children"]);
        return (React.createElement(React.Fragment, null,
            React.createElement(DataTable_styled_1.HeadersContainer, Object.assign({}, rest, { numColumns: columns.length, numHeaders: columns[0].length, columnWidth: cellWidth, rowHeight: initialRowHeight }), columns.map((headerRow, rowIndex) => (React.createElement(DataTable_styled_1.HeaderRow, { "data-cy": "operational-ui__DataTable-row-header", rowHeight: initialRowHeight, key: `op-column-header-${rowIndex}` }, headerRow.map((cell, cellIndex) => (React.createElement(DataTable_styled_1.HeaderCell, { rowIndex: cellIndex, cell: rowIndex + 1, rowHeight: initialRowHeight, key: `op-column-header-cell-${rowIndex}-${cellIndex}`, height: rowHeight }, truncate_1.truncate(maxCharactersInCell)(cell)))))))),
            React.createElement(DataTable_styled_1.DataWrapper, { numHeaders: columns[0].length, rowHeight: initialRowHeight }, children)));
    }), [columns, rows, rowHeight]);
    const numCells = React.useMemo(() => rows[0].length, [rows]);
    const VirtualRow = React.useMemo(() => React.memo(({ style, index }) => (React.createElement(DataTable_styled_1.Row, { "data-cy": "operational-ui__DataTable-row", key: `op-row-${index}`, style: Object.assign({}, style, { height: rowHeight }), cellWidth: cellWidth, numCells: numCells }, rows[index] &&
        rows[index].map((cell, cellIndex) => (React.createElement(DataTable_styled_1.Cell, { rowIndex: index, isEvenRow: index % 2 === 0, key: `op-row-${index}-cell-${cellIndex}`, cell: cellIndex + 1, height: rowHeight }, truncate_1.truncate(maxCharactersInCell)(cell))))))), [rows, rowHeight]);
    return (React.createElement(DataTable_styled_1.Container, { width: width, className: className },
        React.createElement(react_window_1.FixedSizeList, { itemCount: rows.length, itemSize: rowHeight, height: height, width: width, innerElementType: Table, 
            /** can't use data-cy or any other prop because of react-window */
            className: "operational-ui__DataTable--virtual-scroller" }, VirtualRow),
        footer));
}
exports.DataTable = DataTable;
exports.default = React.memo(DataTable);
//# sourceMappingURL=DataTable.js.map