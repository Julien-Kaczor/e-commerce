"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const ActionMenu_1 = __importDefault(require("../ActionMenu/ActionMenu"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const styled_1 = __importDefault(require("../utils/styled"));
/**
 * The flex rule only kicks in when the parent is flex-positioned in case
 * sections are stacked horizontally.
 */
const Container = styled_1.default("div") `
  flex: 1 1;
  display: block;
  position: relative;
  pointer-events: ${({ disabled }) => (disabled ? "none" : "inherit")};
`;
const Overlay = styled_1.default("div") `
  position: absolute;
  top: 0px;
  left: 0px;
  width: 100%;
  height: 100%;
  pointer-events: none;
  ${({ theme }) => `
    z-index: ${theme.zIndex.tooltip};
  `};
  ${({ theme, overlayType }) => {
    switch (overlayType) {
        case "noOverlay":
            return `
          background-color: transparent;
        `;
        case "disabled":
            return `
          background-color: rgba(0, 0, 0, 0.1);
        `;
        case "validTarget":
            return `
          background-color: rgba(239, 223, 50, 0.2);
        `;
        case "invalidTarget":
            return `
          background-color: rgba(255, 255, 255, 0.2);
          border: 2px solid ${theme.color.error};
        `;
        case "dropping":
            return `
          background-color: rgba(239, 223, 50, 0.4);
        `;
    }
}};
`;
const Content = styled_1.default("div") `
  display: block;
  ${({ theme, noHorizontalPadding }) => `
    padding: ${noHorizontalPadding ? `${theme.space.element}px 0` : theme.space.medium}px;
  `};
`;
const Title = styled_1.default("div") `
  position: relative;
  display: flex;
  align-items: center;
  justify-content: space-between;
  height: 36px;
  ${({ theme, withToggle, forceHoverStyles }) => `
    padding: 0px ${theme.space.medium}px;
    font-family: ${theme.font.family.main};
    font-weight: ${theme.font.weight.medium};
    color: ${theme.color.text.lighter};
    font-size: ${theme.font.size.small}px;
    border-bottom: 1px solid ${theme.color.separators.default};
    ${withToggle
    ? `
    cursor: pointer;
    background-color: ${forceHoverStyles ? theme.color.background.lightest : "transparent"};
    svg {
      cursor: pointer;
      color: ${forceHoverStyles ? theme.color.separators.dark : theme.color.separators.default};
    }
    :hover {
      background-color: rgba(0, 0, 0, 0.05);
    }
    :hover svg {
      color: ${theme.color.separators.dark};
    }
    `
    : ""}
  `};
`;
const StyledActionMenu = styled_1.default(ActionMenu_1.default) `
  position: absolute;
  top: 0px;
  right: 0px;
`;
const makeOverlayType = (disabled, dragAndDropFeedback) => {
    if (disabled) {
        return "disabled";
    }
    if (!dragAndDropFeedback) {
        return "noOverlay";
    }
    return dragAndDropFeedback;
};
const CardSection = (_a) => {
    var { title, children, disabled, dragAndDropFeedback, actions, noHorizontalPadding, onActionClick, collapsed, onToggle, onToggleMouseEnter, onToggleMouseLeave, forceToggleHoverStyles } = _a, props = __rest(_a, ["title", "children", "disabled", "dragAndDropFeedback", "actions", "noHorizontalPadding", "onActionClick", "collapsed", "onToggle", "onToggleMouseEnter", "onToggleMouseLeave", "forceToggleHoverStyles"]);
    return (React.createElement(Container, Object.assign({}, props, { disabled: disabled }),
        React.createElement(Overlay, { overlayType: makeOverlayType(disabled, dragAndDropFeedback) }),
        title && (React.createElement(Title, { onMouseEnter: onToggleMouseEnter, onMouseLeave: onToggleMouseLeave, withToggle: Boolean(onToggle), forceHoverStyles: Boolean(forceToggleHoverStyles), onClick: onToggle },
            title,
            onToggle && React.createElement(Icon_1.default, { size: 14, name: collapsed ? "ChevronDown" : "ChevronUp" }),
            actions && React.createElement(StyledActionMenu, { "data-cy": "card-section__action-menu", items: actions, onClick: onActionClick }))),
        !collapsed && React.createElement(Content, { noHorizontalPadding: noHorizontalPadding }, children)));
};
exports.default = CardSection;
//# sourceMappingURL=CardSection.js.map