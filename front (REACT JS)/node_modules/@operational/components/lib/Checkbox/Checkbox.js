"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@emotion/core");
const uniqueId_1 = __importDefault(require("lodash/uniqueId"));
const React = __importStar(require("react"));
const styled_1 = __importDefault(require("../utils/styled"));
const toggleCheckboxAnimation = core_1.keyframes `
  0% {
    opacity: 0;
    transform: scale(0.6) rotate(45deg);
  }

  70% {
    opacity: 1;
    transform: scale(1.1) rotate(45deg);
  }
  
  100% {
    transform: scale(1) rotate(45deg);
  }
`;
// ref: https://codersblock.com/blog/checkbox-trickery-with-css/
const Input = styled_1.default("input") `
  position: absolute;
  left: -100vw;

  :checked + label::after {
    content: "";
    display: block;
    width: ${({ condensed }) => (condensed ? 4 : 5)}px;
    height: ${({ condensed }) => (condensed ? 6 : 11)}px;
    position: absolute;
    left: ${({ condensed }) => (condensed ? 3 : 6)}px;
    margin: 0 auto;
    top: 1px;
    transform: rotate(45deg);
    border-right: ${({ condensed, theme }) => `${condensed ? 1 : 2}px solid ${theme.color.primary}`};
    border-bottom: ${({ condensed, theme }) => `${condensed ? 1 : 2}px solid ${theme.color.primary}`};
    cursor: pointer;
    animation: ${toggleCheckboxAnimation} 0.2s ease forwards;
  }

  :disabled + label {
    cursor: not-allowed;
    pointer-events: none;
  }
`;
const Label = styled_1.default("label") `
  position: relative;
  cursor: pointer;
  height: ${({ condensed }) => (condensed ? 13 : 20)}px;
  display: block;
  margin-bottom: ${({ theme, condensed }) => (condensed ? 0 : theme.space.small)}px;
  padding-left: ${({ condensed }) => (condensed ? 18 : 32)}px;
  line-height: ${({ condensed }) => (condensed ? 13 : 20)}px;
  user-select: none;
  font-size: ${({ theme, condensed }) => (condensed ? theme.font.size.small : theme.font.size.body)}px;
  font-weight: 400;

  :hover {
    color: ${props => props.theme.color.primary};

    ::before {
      border: solid 1px ${props => props.theme.color.primary};
    }
  }

  ::before {
    content: "";
    cursor: pointer;
    position: absolute;
    display: block;
    top: 0;
    left: 0;
    width: ${({ condensed }) => (condensed ? 10 : 18)}px;
    height: ${({ condensed }) => (condensed ? 10 : 18)}px;
    border-radius: ${props => props.theme.borderRadius}px;
    background-color: #f2f2f2;
    border: solid 1px #c0c0c0;
  }
`;
const Checkbox = (_a) => {
    var { value, onChange, label, disabled, condensed } = _a, props = __rest(_a, ["value", "onChange", "label", "disabled", "condensed"]);
    const uuid = uniqueId_1.default("checkbox_");
    return (React.createElement("div", { style: disabled ? { opacity: 0.6 } : {} },
        React.createElement(Input, Object.assign({ condensed: condensed, id: uuid, type: "checkbox", checked: Boolean(value), onChange: () => (onChange ? onChange(!value) : undefined), disabled: disabled }, props)),
        React.createElement(Label, { condensed: condensed, htmlFor: uuid }, label)));
};
Checkbox.defaultProps = {
    value: false,
};
exports.default = Checkbox;
//# sourceMappingURL=Checkbox.js.map