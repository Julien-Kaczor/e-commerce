import * as React from "react";
import { Tab } from "../Internals/Tabs";
import { DefaultProps } from "../types";
export interface BaseCardColumnProps extends DefaultProps {
    /** Column title */
    title?: string;
    /** Align the content to the right */
    contentRight?: boolean;
    /** Force the column to be full with */
    fullWidth?: boolean;
    /** Remove padding */
    noPadding?: boolean;
}
export interface CardColumnPropsWithTabs extends BaseCardColumnProps {
    /** Tabs for the CardColumn header */
    tabs: Tab[];
    /** What's the currently active tab? */
    activeTabName?: string;
    /** What happens when we change tabs? */
    onTabChange?: (newTabName: string) => void;
    children?: never;
}
export interface CardColumnPropsWithoutTabs extends BaseCardColumnProps {
    /** Do we have tabs? */
    tabs?: never;
    activeTabName?: never;
    onTabChange?: never;
    children?: React.ReactNode;
}
export declare type CardColumnProps = CardColumnPropsWithTabs | CardColumnPropsWithoutTabs;
declare const Tab: import("@emotion/styled-base").StyledComponent<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    active: boolean;
}, Readonly<{
    font: {
        family: {
            main: string;
            code: string;
        };
        lineHeight: number;
        size: {
            title: number;
            body: number;
            small: number;
            fineprint: number;
            tiny: number;
        };
        weight: {
            regular: 400 | 500 | 600;
            medium: 400 | 500 | 600;
            bold: 400 | 500 | 600;
        };
    };
    space: {
        base: number;
        small: number;
        medium: number;
        content: number;
        element: number;
        big: number;
    };
    zIndex: {
        default: number;
        selectOptions: number;
        formFieldError: number;
        tooltip: number;
        modal: number;
        confirm: number;
        debugViewer: number;
        globalProgress: number;
        messages: number;
        switch: number;
    };
    color: {
        primary: string;
        disabled: string;
        warning: string;
        success: string;
        error: string;
        basic: string;
        ghost: string;
        white: string;
        highlight: string;
        black: string;
        background: {
            dark: string;
            mediumDark: string;
            light: string;
            lighter: string;
            lightest: string;
            almostWhite: string;
        };
        separators: {
            dark: string;
            default: string;
            light: string;
        };
        text: {
            dark: string;
            default: string;
            disabled: string;
            light: string;
            lighter: string;
            lightest: string;
            action: string;
            white: string;
        };
        border: {
            default: string;
            disabled: string;
            invisible: string;
            medium: string;
            lightest: string;
        };
        palette: string[];
    };
    shadows: {
        pressed: string;
        topBar: string;
        focus: string;
        insetFocus: string;
        popup: string;
        card: string;
    };
    borderRadius: number;
    compactSidebarWidth: number;
    sidebarWidth: number;
    topbarHeight: number;
    titleHeight: number;
}>>;
declare const CardColumn: ({ title, tabs, activeTabName, onTabChange, children, ...props }: CardColumnProps) => JSX.Element;
export default CardColumn;
