"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@emotion/core");
const Tooltip_1 = require("../Tooltip/Tooltip");
const utils_1 = require("../utils");
const styled_1 = __importDefault(require("../utils/styled"));
exports.inputFocus = ({ theme, isError }) => ({
    outline: 0,
    borderColor: isError ? theme.color.error : theme.color.primary,
    boxShadow: `0 0 0 3px ${isError ? utils_1.lighten(theme.color.error, 60) : utils_1.lighten(theme.color.primary, 40)}`,
});
exports.Label = styled_1.default("label")(({ fullWidth, theme, left }) => ({
    display: "inline-block",
    position: "relative",
    width: "100%",
    maxWidth: fullWidth ? "none" : "360px",
    marginRight: left ? theme.space.small : 0,
}));
exports.FormFieldControls = styled_1.default("div")({
    position: "absolute",
    top: -2,
    right: 0,
});
exports.hoverTooltip = {
    [`.${Tooltip_1.dangerousTooltipContainerClassName}`]: {
        visibility: "hidden",
        pointerEvents: "none",
    },
    ":hover": {
        [`.${Tooltip_1.dangerousTooltipContainerClassName}`]: {
            visibility: "visible",
            pointerEvents: "all",
        },
    },
};
exports.FormFieldControl = styled_1.default("div")(({ theme }) => (Object.assign({ cursor: "pointer", position: "relative", verticalAlign: "middle", display: "inline-flex", width: 12, marginLeft: theme.space.base, color: theme.color.text.lightest, height: 12 }, exports.hoverTooltip, { "& svg": {
        position: "relative",
    }, ":hover": {
        color: theme.color.text.default,
    }, " *": {
        pointerEvents: "none",
    } })));
exports.FormFieldError = styled_1.default("div")(({ theme }) => ({
    fontSize: theme.font.size.fineprint,
    color: theme.color.error,
    padding: `${theme.space.base / 2}px ${theme.space.medium}px`,
    marginBottom: 0,
    width: "100%",
    borderBottomLeftRadius: theme.borderRadius,
    borderBottomRightRadius: theme.borderRadius,
    border: `1px solid ${theme.color.error}`,
    borderTop: 0,
    transform: "translate3d(0, 100%, 0)",
    position: "absolute",
    backgroundColor: utils_1.lighten(theme.color.error, 60),
    boxShadow: `0px 3px 5px #d3d1d3`,
    // Nudge up just a little bit to look blended into the form
    bottom: 2,
    left: 0,
    zIndex: theme.zIndex.formFieldError,
}));
exports.floatIn = core_1.keyframes({
    from: {
        opacity: 0,
        transform: "translate3d(0, -6px, 0)",
    },
    to: {
        opacity: 1,
        transform: "translate3d(0, 0, 0)",
    },
});
exports.resetTransform = core_1.keyframes({
    to: {
        transform: "none",
    },
});
exports.spin = core_1.keyframes({
    from: {
        transform: "rotate(0deg)",
    },
    to: {
        transform: "rotate(359deg)",
    },
});
//# sourceMappingURL=mixins.js.map