"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const react_testing_library_1 = require("react-testing-library");
const _1 = require(".");
const MyComponent = () => {
    const { width, height } = _1.useWindowSize();
    return (react_1.default.createElement("div", { "data-testid": "result" },
        width,
        "x",
        height));
};
describe("useURLState", () => {
    afterEach(react_testing_library_1.cleanup);
    it("should reflect the window size", () => __awaiter(this, void 0, void 0, function* () {
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(MyComponent, null));
        expect(getByTestId("result")).toMatchInlineSnapshot(`
<div
  data-testid="result"
>
  1024
  x
  768
</div>
`);
    }));
    it("should rerender when the window size changes", () => __awaiter(this, void 0, void 0, function* () {
        const { getByTestId } = react_testing_library_1.render(react_1.default.createElement(MyComponent, null));
        expect(getByTestId("result")).toMatchInlineSnapshot(`
<div
  data-testid="result"
>
  1024
  x
  768
</div>
`);
        react_testing_library_1.act(() => {
            // @ts-ignore window.innerWidth _can be_ overwritten in this case.
            window.innerWidth = 200;
            // @ts-ignore window.innerHeight _can be_ overwritten in this case.
            window.innerHeight = 500;
            window.dispatchEvent(new Event("resize"));
        });
        expect(getByTestId("result")).toMatchInlineSnapshot(`
<div
  data-testid="result"
>
  200
  x
  500
</div>
`);
    }));
});
//# sourceMappingURL=useWindowSize.test.js.map