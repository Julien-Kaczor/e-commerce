import * as React from "react";
import { IMessage } from "../OperationalContext/OperationalContext";
import { DeepPartial } from "../utils";
import { OperationalStyleConstants } from "../utils/constants";
export interface OperationalUIProps {
    /** Children */
    children?: React.ReactNode;
    /** Omit setting a set of base styles */
    noBaseStyles?: boolean;
    /** Custom push state method expecting a single string */
    pushState?: (path: string) => void;
    /** Custom replace state method expecting a single string */
    replaceState?: (path: string) => void;
    /**
     * A time interval after which a non-error message is automatically cleared, measured in milliseconds. If the value set is `0`, no message will disappear.
     *
     * @default 10000 (10s)
     */
    hideMessageAfter?: number;
    /**
     * Dangerous: Disable the error boundary if explicitly set to false
     */
    errorBoundary?: boolean;
    /**
     * Custom error handler on `componentDidCatch`
     */
    onError?: (error: Error) => void;
    /**
     * Custom theme
     */
    theme?: DeepPartial<OperationalStyleConstants>;
}
export interface State {
    messages: Array<{
        message: IMessage;
        addedAt: number;
        count: number;
    }>;
    isLoading: boolean;
    error?: Error;
}
declare class OperationalUI extends React.Component<OperationalUIProps, State> {
    static defaultProps: Partial<OperationalUIProps>;
    state: State;
    /**
     *  The interval responsible for periodically checking
     *  whether any messages need to be removed from state
     */
    messageTimerInterval: ReturnType<typeof setInterval> | null;
    removeOutdatedMessages(): void;
    setLoading: (isLoading: boolean) => void;
    componentDidCatch(error: Error): void;
    componentWillUnmount(): void;
    render(): JSX.Element;
    private pushMessage;
    private clearMessages;
}
export default OperationalUI;
