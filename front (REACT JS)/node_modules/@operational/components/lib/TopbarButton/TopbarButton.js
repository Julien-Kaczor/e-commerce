"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const styled_1 = __importDefault(require("../utils/styled"));
const TopbarButtonContainer = styled_1.default("div") `
  height: 100%;
  display: flex;
  align-items: center;
  cursor: ${props => (props.disabled ? "auto" : "pointer")};
  background-color: transparent;
  opacity: ${props => (props.disabled ? 0.6 : 1)};
  font-size: ${props => props.theme.font.size.fineprint}px;
  color: ${props => props.theme.color.text.lighter};
  padding: 0px ${props => props.theme.space.medium}px;
  :hover {
    background-color: ${props => (props.disabled ? "transparent" : props.theme.color.background.lighter)};
  }
  & svg {
    /** Icons are purely presentational and click events are handled upstream */
    pointer-events: none;
  }
`;
const TopbarButton = (_a) => {
    var { children, icon, onClick } = _a, props = __rest(_a, ["children", "icon", "onClick"]);
    return (React.createElement(TopbarButtonContainer, Object.assign({ onClick: props.disabled ? undefined : onClick }, props),
        children,
        icon && React.createElement(Icon_1.default, { right: true, name: icon, size: 12 })));
};
exports.default = TopbarButton;
//# sourceMappingURL=TopbarButton.js.map