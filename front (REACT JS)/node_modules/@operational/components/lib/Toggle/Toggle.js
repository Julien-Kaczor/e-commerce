"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const utils_1 = require("../utils");
const styled_1 = __importDefault(require("../utils/styled"));
const Container = styled_1.default("div") `
  > :not(:last-child) {
    margin-right: 0;
    border-radius: ${({ theme: { borderRadius } }) => `${borderRadius}px 0 0 ${borderRadius}px`};
  }

  > :not(:first-child) {
    left: -1px; /* Merge buttons */
    border-radius: ${({ theme: { borderRadius } }) => `0 ${borderRadius}px ${borderRadius}px 0`};
  }
`;
const Button = styled_1.default("div") `
  line-height: ${props => (props.condensed ? 28 : 36)}px;
  font-size: ${props => props.theme.font.size.fineprint}px;
  font-weight: ${props => props.theme.font.weight.medium};
  display: inline-flex;
  align-items: center;
  justify-content: center;
  border-radius: ${props => props.theme.borderRadius}px;
  border: 0;
  cursor: pointer;
  outline: none;
  margin-right: ${props => props.theme.space.small}px;
  background-color: ${props => (props.selected ? utils_1.darken(props.theme.color.white, 5) : props.theme.color.white)};
  padding: 0 ${props => props.theme.space.element}px;
  color: ${props => (props.selected ? props.theme.color.primary : props.theme.color.text.default)};
  box-shadow: ${({ selected, condensed, theme: { color } }) => {
    const originalBoxShadow = `0 0 0 1px ${color.border.disabled} inset`;
    if (selected) {
        const innerShadow = condensed ? `0 0 5px 1px #C8C8C8 inset` : `0 0 7px 1px #C8C8C8 inset`;
        return `${originalBoxShadow}, ${innerShadow};`;
    }
    return originalBoxShadow;
}};

  :hover {
    background-color: ${props => utils_1.darken(props.theme.color.white, 5)};
  }
`;
const Toggle = props => (React.createElement(Container, null, props.options.map(item => (React.createElement(Button, { selected: item.value === props.value, condensed: props.condensed, key: item.value, onClick: () => props.onChange(item.value) }, item.label)))));
exports.default = Toggle;
//# sourceMappingURL=Toggle.js.map