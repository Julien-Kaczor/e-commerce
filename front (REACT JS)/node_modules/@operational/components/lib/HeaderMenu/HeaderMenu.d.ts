import { Cancelable } from "lodash";
import * as React from "react";
import { ContextMenuProps } from "../ContextMenu/ContextMenu";
import { DefaultProps } from "../types";
export interface HeaderMenuProps extends DefaultProps {
    /** Clickable component(s) from which menu appears  */
    children: React.ReactNode | React.ReactNode[];
    /** Action when item in dropdown is selected - if specified here, it is applied to all dropdown items */
    onClick?: ContextMenuProps["onClick"];
    /** Items to display in dropdown */
    items: ContextMenuProps["items"];
    /** Display caret on opposite side to align prop */
    withCaret?: boolean;
    /** Alignment */
    align?: ContextMenuProps["align"];
}
interface HeaderMenuState {
    renderedMenuWidth: number;
}
declare class HeaderMenu extends React.PureComponent<HeaderMenuProps, Readonly<HeaderMenuState>> {
    readonly state: HeaderMenuState;
    static defaultProps: {
        align: string;
        withCaret: boolean;
    };
    private menuRef;
    componentDidMount(): void;
    componentWillUnmount(): void;
    componentDidUpdate(): void;
    /**
     * Explicit typing is required here in order to give the typescript compiler access to typings
     * used to work out type definitions for the debounce method.
     * @todo look into making this unnecessary.
     */
    handleResize: (() => void) & Cancelable;
    private updateRenderedWidth;
    render(): JSX.Element;
}
export default HeaderMenu;
