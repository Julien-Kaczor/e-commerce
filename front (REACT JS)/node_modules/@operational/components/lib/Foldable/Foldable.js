"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Foldable_Toggler_1 = __importDefault(require("./Foldable.Toggler"));
const Foldable = ({ initialState = "open", children }) => {
    const togglerRef = React.useRef(null);
    const [isParentFolded, setIsFolded] = React.useState(initialState === "closed");
    const [isTogglerHovered, setIsTogglerHovered] = React.useState(false);
    React.useEffect(() => {
        const handleMouseMove = (e) => {
            if (togglerRef.current === null) {
                return;
            }
            if (isTogglerHovered && !e.path.map((el) => el.className).includes(togglerRef.current.className)) {
                setIsTogglerHovered(false);
            }
        };
        document.addEventListener("mousemove", handleMouseMove);
        return () => document.removeEventListener("mousemove", handleMouseMove);
    }, [isTogglerHovered]);
    return children({
        Toggler: ({ onClick, isFolded }) => (React.createElement(Foldable_Toggler_1.default, { onMouseEnter: e => {
                e.stopPropagation();
                setIsTogglerHovered(true);
            }, onMouseLeave: e => {
                e.stopPropagation();
                setIsTogglerHovered(false);
            }, isHovered: isTogglerHovered, isFolded: typeof isFolded === "undefined" ? isParentFolded : Boolean(isFolded), onClick: onClick || (() => setIsFolded(prevState => !prevState)) })),
        isFolded: isParentFolded,
    });
};
exports.default = Foldable;
//# sourceMappingURL=Foldable.js.map