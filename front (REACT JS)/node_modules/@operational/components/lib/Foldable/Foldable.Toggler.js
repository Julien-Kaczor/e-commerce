"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const styled_1 = __importDefault(require("../utils/styled"));
const FoldableIcon = styled_1.default(Icon_1.default) `
  margin-left: auto;
  pointer-events: none;
`;
/**
 * This component overlays its child with a full-size
 * div that gets darker on hover in order to signal
 * clickability.
 *
 * This was done in order to support cases where
 * `CardSection`s become Foldable but BOTH become
 * foldable when stacked horizontally.
 *
 * @micha-f has more info.
 */
const TogglerOverlay = styled_1.default("div") `
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: flex-end;
  cursor: pointer;
  padding-right: ${({ theme }) => theme.space.content}px;
  background-color: ${({ isHovered }) => (isHovered ? "rgba(0, 0, 0, 0.04)" : "transparent")};
`;
const Toggler = (_a) => {
    var { isFolded, isHovered } = _a, props = __rest(_a, ["isFolded", "isHovered"]);
    return (React.createElement(TogglerOverlay, Object.assign({ isHovered: Boolean(isHovered) }, props),
        React.createElement(FoldableIcon, { color: isHovered
                ? "color.text.lighter"
                : "#00000022" /* <- is alpha-blended in order to be visible even on grey backgrounds as in <Group /> */, name: isFolded ? "ChevronDown" : "ChevronUp" })));
};
exports.default = Toggler;
//# sourceMappingURL=Foldable.Toggler.js.map