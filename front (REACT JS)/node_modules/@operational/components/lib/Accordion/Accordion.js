"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const SectionHeader_1 = require("../Internals/SectionHeader");
const styled_1 = __importDefault(require("../utils/styled"));
const Container = styled_1.default("div") `
  label: Accordion;
  height: 100%;
  display: grid;
  grid-template-rows: ${({ theme, sections }) => sections.map(({ expanded }) => (expanded ? "1fr" : `${theme.space.element * 2}px`)).join(" ")};
  border: solid 1px ${({ theme }) => theme.color.separators.default};
  border-top: none;
`;
const AccordionSection = styled_1.default("div") `
  label: AccordionSection;
  /* to make sure it respects parrent grid's row height */
  overflow: hidden;
  /* to fix overflow: hidden above, otherwise header can disappear */
  display: grid;
  grid-template-rows: ${({ theme }) => {
    const headerHeight = theme.space.element * 2;
    return `${headerHeight}px calc(100% - ${headerHeight}px)`;
}};
  /* for Focus */
  position: relative;
`;
const Header = styled_1.default(SectionHeader_1.SectionHeader)(({ theme, expanded }) => ({
    cursor: "pointer",
    borderTop: `1px solid ${theme.color.separators.default}`,
    borderBottom: `1px solid ${expanded ? theme.color.separators.default : theme.color.background.lighter}`,
    // disable browser focus to customise focus state
    ":focus": {
        outline: "none",
    },
}));
Header.defaultProps = { role: "button", "aria-disabled": false };
const Panel = styled_1.default("div") `
  label: AccordionPanel;
  /* we need it because of overflow: hidden; above */
  overflow: auto;
  height: 100%;
  padding: ${({ theme }) => theme.space.element}px;
  background-color: ${({ theme }) => theme.color.white};
`;
Panel.defaultProps = { role: "region" };
const Chevron = styled_1.default(Icon_1.default) `
  align-content: flex-end;
`;
Chevron.defaultProps = { size: 14 };
const Focus = styled_1.default("div") `
  label: AccordionFocus;
  position: absolute;
  width: 100%;
  height: 100%;
  top: 0;
  left: 0;
  /* we show it above other elements so that shadow would be visible, but we disable all events for it */
  pointer-events: none;
  ${({ theme }) => `box-shadow: ${theme.shadows.insetFocus};`}
`;
const Accordion = (_a) => {
    var { sections, onToggle } = _a, rest = __rest(_a, ["sections", "onToggle"]);
    // this ref is used to detect if visitor uses mouse or keyboard
    // and show focuse state in case of keyboard
    const isMouseRef = React.useRef(false);
    const [focusIndex, setFocusIndex] = React.useState(null);
    return (React.createElement(Container, Object.assign({ sections: sections, onMouseDown: () => {
            isMouseRef.current = true;
        }, onKeyDown: () => {
            isMouseRef.current = false;
        }, "data-cy": "operational-ui__Accordion" }, rest), sections.map(({ title, content, expanded, key }, i) => {
        const titleId = `accordion-heading-${key}`;
        const contentId = `accordion-panel-${key}`;
        const toggle = () => {
            isMouseRef.current = false;
            onToggle(i);
        };
        return (React.createElement(AccordionSection, { expanded: expanded, key: key },
            React.createElement(Header, { id: titleId, "aria-controls": contentId, "aria-expanded": expanded, tabIndex: 0, onClick: toggle, onKeyPress: toggle, expanded: expanded, onFocus: () => {
                    if (!isMouseRef.current) {
                        setFocusIndex(i);
                    }
                }, onBlur: () => setFocusIndex(null) },
                title,
                React.createElement(Chevron, { name: expanded ? "ChevronUp" : "ChevronDown" })),
            React.createElement(Panel, { id: contentId, "aria-labelledby": titleId, hidden: !expanded }, expanded && content()),
            focusIndex === i ? React.createElement(Focus, null) : null));
    })));
};
exports.default = Accordion;
//# sourceMappingURL=Accordion.js.map