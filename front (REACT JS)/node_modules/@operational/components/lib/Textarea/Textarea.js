"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_copy_to_clipboard_1 = __importDefault(require("react-copy-to-clipboard"));
const Hint_1 = __importDefault(require("../Hint/Hint"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const LabelText_1 = require("../LabelText/LabelText");
const OperationalContext_1 = require("../OperationalContext/OperationalContext");
const useUniqueId_1 = require("../useUniqueId");
const utils_1 = require("../utils");
const mixins_1 = require("../utils/mixins");
const styled_1 = __importDefault(require("../utils/styled"));
const TextareaComp = styled_1.default("textarea")((_a) => {
    var { theme, isCode, resize, autoFocus, height } = _a, props = __rest(_a, ["theme", "isCode", "resize", "autoFocus", "height"]);
    return Object.assign({ height,
        resize, autofocus: autoFocus, fontSize: theme.font.size.body, fontWeight: theme.font.weight.regular, display: "block", width: "100%", minHeight: 120, padding: `${theme.space.small}px ${theme.space.medium}px`, fontFamily: isCode ? "monospace" : theme.font.family.main, outline: "none", border: "none", 
        // There's an white subpixel if it's theme.borderRadius and no noticeable regression if -1
        borderRadius: theme.borderRadius - 1 }, props);
});
const ActionHeader = styled_1.default("div")(({ theme }) => ({
    fontSize: theme.font.size.fineprint,
    color: theme.color.text.lighter,
    backgroundColor: theme.color.background.lighter,
    padding: `${theme.space.base}px ${theme.space.small}px`,
    width: `100%`,
    display: "flex",
    justifyContent: "flex-end",
    borderTopLeftRadius: theme.borderRadius - 1,
    borderTopRightRadius: theme.borderRadius - 1,
    /**
     * Use case: External Links typically have <Icon/>s next to them.
     */
    "& a": {
        display: "inline-flex",
        alignItems: "center",
        color: theme.color.primary,
        cursor: "pointer",
        "&:hover": {
            textDecoration: "underline",
        },
    },
    "& svg": {
        margin: `0 ${theme.space.base}px`,
        width: 10,
        height: 10,
        cursor: "pointer",
    },
}));
const Outline = styled_1.default("div")(({ theme, error, focus, disabled }) => ({
    boxShadow: focus
        ? `0 0 0 3px ${error ? utils_1.lighten(theme.color.error, 60) : utils_1.lighten(theme.color.primary, 40)}`
        : "initial",
    borderRadius: theme.borderRadius,
    border: `${theme.color.border.default} 1px solid`,
    borderColor: error ? theme.color.error : theme.color.border.default,
    opacity: disabled ? 0.6 : 1.0,
}));
const FormFieldError = styled_1.default("div")(({ theme }) => ({
    fontSize: theme.font.size.fineprint,
    color: theme.color.error,
    padding: `${theme.space.base / 2}px ${theme.space.medium}px`,
    marginBottom: 0,
    width: "100%",
    borderBottomLeftRadius: theme.borderRadius - 1,
    borderBottomRightRadius: theme.borderRadius - 1,
    backgroundColor: utils_1.lighten(theme.color.error, 60),
}));
const Textarea = (_a) => {
    var { id, fullWidth, label, hint, value, autoFocus, error, action, height, onChange, onSubmit, onFocus, onBlur, disabled = false, code = false, copy = false, resize = "vertical", tabIndex, placeholder } = _a, props = __rest(_a, ["id", "fullWidth", "label", "hint", "value", "autoFocus", "error", "action", "height", "onChange", "onSubmit", "onFocus", "onBlur", "disabled", "code", "copy", "resize", "tabIndex", "placeholder"]);
    const { pushMessage } = OperationalContext_1.useOperationalContext();
    const uniqueId = useUniqueId_1.useUniqueId(id);
    const [focus, setFocus] = React.useState(false);
    const focusHandler = (ev) => {
        setFocus(true);
        if (onFocus) {
            onFocus(ev);
        }
    };
    const blurHandler = (ev) => {
        setFocus(false);
        if (onBlur) {
            onBlur(ev);
        }
    };
    return (React.createElement(mixins_1.Label, { id: `textarea-label-${uniqueId}`, fullWidth: fullWidth },
        label && React.createElement(LabelText_1.LabelText, null, label),
        hint && (React.createElement(mixins_1.FormFieldControls, null,
            React.createElement(Hint_1.default, { textId: `textarea-hint-${uniqueId}` }, hint))),
        React.createElement(Outline, { focus: focus, error: Boolean(error), disabled: disabled },
            (action || copy) && (React.createElement(ActionHeader, null,
                action,
                copy && (React.createElement(react_copy_to_clipboard_1.default, { text: value, onCopy: () => pushMessage({ type: "success", body: "Successfully Copied" }) },
                    React.createElement("div", { role: "button", "aria-label": "Copy to Clipboard" },
                        React.createElement(Icon_1.default, { size: 8, name: "Copy" }),
                        React.createElement("a", null, "Copy to clipboard")))))),
            React.createElement(TextareaComp, Object.assign({ id: `textarea-field-${uniqueId}`, "aria-label": label ? label : undefined, "aria-labelledby": `textarea-label-${uniqueId}`, "aria-describedby": hint ? `textarea-hint-${uniqueId}` : undefined, disabled: disabled, isCode: code, value: value, autoFocus: autoFocus, resize: resize, height: height, tabIndex: tabIndex, placeholder: placeholder, onFocus: focusHandler, onBlur: blurHandler, onKeyDown: (ev) => {
                    if (utils_1.isCmdEnter(ev) && onSubmit) {
                        onSubmit();
                    }
                }, onChange: (e) => {
                    if (!onChange) {
                        return;
                    }
                    onChange(e.target.value);
                } }, props)),
            error && React.createElement(FormFieldError, null, error))));
};
exports.default = Textarea;
//# sourceMappingURL=Textarea.js.map