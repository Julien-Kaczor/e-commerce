"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const react_markdown_1 = __importDefault(require("react-markdown"));
const Checkbox_1 = __importDefault(require("../Checkbox/Checkbox"));
const Code_1 = __importDefault(require("../Code/Code"));
const Table_1 = __importDefault(require("../Table/Table"));
const Body_1 = __importDefault(require("../Typography/Body"));
const Title_1 = __importDefault(require("../Typography/Title"));
const styled_1 = __importDefault(require("../utils/styled"));
const BulletPoint = styled_1.default("div") `
  width: 6px;
  height: 6px;
  border-radius: 50%;
  background-color: currentColor;
  margin-right: ${({ theme }) => theme.space.small}px;
  margin-top: 6px;
  float: left;
`;
const Blockquote = styled_1.default("div") `
  border-left: 3px solid ${({ theme }) => theme.color.border.default};
  padding-left: ${({ theme }) => theme.space.content}px;
  color: ${({ theme }) => theme.color.text.lighter};

  :not(:last-child) {
    margin-bottom: ${({ theme }) => theme.space.big}px;
  }

  div {
    color: ${({ theme }) => theme.color.text.lighter};
  }
`;
const Markdown = ({ value: inputValue }) => {
    /**
     * react-markdown supports a concept of "renderers" that render
     * specific JSX for a given piece of Markdown AST.
     *
     * This is the dictionary that maps bits of Markdown to our
     * components.
     */
    const renderers = {
        code: ({ value, language }) => (React.createElement(Code_1.default, { syntax: language }, value)),
        heading: ({ children }) => React.createElement(Title_1.default, null, children),
        paragraph: ({ children }) => React.createElement(Body_1.default, null, children),
        listItem: ({ children, checked }) => (React.createElement(Body_1.default, null,
            checked === null && (React.createElement(React.Fragment, null,
                React.createElement(BulletPoint, null),
                " ",
                children)),
            typeof checked === "boolean" && React.createElement(Checkbox_1.default, { value: checked, label: children }))),
        blockquote: ({ children }) => React.createElement(Blockquote, null, children),
        /**
         * The structure of the table renderer in react-markdown
         * may be a little concerning: it gives you a full set of Table components in the
         * following shape:
         *
         * [
         *  { ...tableHead },
         *  { ...tableBody }
         * ]
         *
         * The schemas of these objects are react components with a predictable shape.
         * We've nailed down this version to be _exact_ in package.json so these will
         * not change, but as far as I can see, there is no better way to render tables
         * with this library.
         *
         * We looked at other libraries and also weren't able to find a clean-enough
         * solution. :(
         */
        table: ({ children: [tableHead, tableBody] }) => {
            const columns = tableHead.props.children[0].props.children.map(columnNode => columnNode.props.children[0].props.value);
            const data = tableBody.props.children.map(row => row.props.children
                .map(child => child.props.children)
                .reduce((acc, child, index) => (Object.assign({}, acc, { [columns[index]]: child[0].props.value })), {}));
            return React.createElement(Table_1.default, { columns: columns, data: data });
        },
    };
    return React.createElement(react_markdown_1.default, { renderers: renderers, source: inputValue });
};
exports.default = Markdown;
//# sourceMappingURL=Markdown.js.map