"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@emotion/core");
const React = __importStar(require("react"));
const Card_1 = __importDefault(require("../Card/Card"));
const Overlay_1 = __importDefault(require("../Internals/Overlay"));
const styled_1 = __importDefault(require("../utils/styled"));
const fromTop = (fullSize) => {
    const translateX = fullSize ? 0 : "-50%";
    return core_1.keyframes `
  0% {
    transform: translate(${translateX}, -10px)
  }
  100% {
    transform: translate(${translateX}, 0)
  }
`;
};
exports.ModalContainer = styled_1.default(Card_1.default)(({ theme, fullSize, type }) => (Object.assign({ top: theme.space.element, left: fullSize ? theme.space.element : "50%", height: fullSize ? "100%" : "fit-content", animation: `${fromTop(Boolean(fullSize))} 0.2s`, position: "absolute", minWidth: 600, zIndex: type === "confirm" ? theme.zIndex.confirm : theme.zIndex.modal, maxWidth: `calc(100% - ${theme.space.element * 2}px)` }, (fullSize
    ? // Full-size specific rules
        {
            border: 0,
            width: 1110,
            display: "grid",
            gridTemplateRows: "40px 100%",
            maxHeight: `calc(100% - ${theme.space.element * 3}px)`,
        }
    : // Regular size rules
        {
            transform: "translate(-50%, 0)",
        }))));
const Content = styled_1.default("div")(({ theme, fullSize }) => (Object.assign({ display: "flex", flexDirection: "column", justifyContent: "space-between", 
    // Invert control of spacing from Card to Modal
    margin: theme.space.element * -1, padding: theme.space.element }, (fullSize
    ? {
        height: "100%",
        overflow: "auto",
    }
    : {}))));
const ControlledModal = ({ id, className, type, contentClassName, onClose, fullSize, title, action, children, closeOnOverlayClick, }) => (React.createElement(React.Fragment, null,
    React.createElement(Overlay_1.default, { id: id, className: className, type: type, onClick: () => {
            if (closeOnOverlayClick !== false && onClose) {
                onClose();
            }
        } }),
    React.createElement(exports.ModalContainer, { type: type, className: contentClassName, fullSize: Boolean(fullSize), title: title, action: action },
        React.createElement(Content, { fullSize: Boolean(fullSize) }, children))));
exports.default = ControlledModal;
//# sourceMappingURL=ControlledModal.js.map