import * as React from "react";
import { ButtonProps } from "../Button/Button";
export interface ConfirmBodyProps<T> {
    setConfirmState: (state?: Partial<T>) => void;
    confirmState: T;
}
export interface ConfirmOptions<T> {
    title: React.ReactNode;
    body: React.ReactNode | React.ComponentType<ConfirmBodyProps<T>>;
    fullSize?: boolean;
    cancelButton?: React.ReactElement<ButtonProps> | ((confirmState: T) => React.ReactElement<ButtonProps>) | null;
    actionButton?: React.ReactElement<ButtonProps> | ((confirmState: T) => React.ReactElement<ButtonProps>) | null;
    onConfirm?: (confirmState: T) => void;
    onCancel?: (confirmState: T) => void;
    state?: T;
    /**
     * Prevent closing the modal on overlay click if it's specify to `false`
     *
     * @default true
     */
    closeOnOverlayClick?: boolean;
}
export interface State<T> {
    options: Partial<ConfirmOptions<T>>;
}
export interface Props {
    children: (confirm: <T>(options: ConfirmOptions<T>) => void) => React.ReactNode;
}
export declare const Actions: import("@emotion/styled-base").StyledComponent<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, Pick<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "color" | "hidden" | "dir" | "slot" | "style" | "title" | "children" | "onClick" | "id" | "className" | "defaultChecked" | "defaultValue" | "suppressContentEditableWarning" | "suppressHydrationWarning" | "accessKey" | "contentEditable" | "contextMenu" | "draggable" | "lang" | "placeholder" | "spellCheck" | "tabIndex" | "inputMode" | "is" | "radioGroup" | "role" | "about" | "datatype" | "inlist" | "prefix" | "property" | "resource" | "typeof" | "vocab" | "autoCapitalize" | "autoCorrect" | "autoSave" | "itemProp" | "itemScope" | "itemType" | "itemID" | "itemRef" | "results" | "security" | "unselectable" | "aria-activedescendant" | "aria-atomic" | "aria-autocomplete" | "aria-busy" | "aria-checked" | "aria-colcount" | "aria-colindex" | "aria-colspan" | "aria-controls" | "aria-current" | "aria-describedby" | "aria-details" | "aria-disabled" | "aria-dropeffect" | "aria-errormessage" | "aria-expanded" | "aria-flowto" | "aria-grabbed" | "aria-haspopup" | "aria-hidden" | "aria-invalid" | "aria-keyshortcuts" | "aria-label" | "aria-labelledby" | "aria-level" | "aria-live" | "aria-modal" | "aria-multiline" | "aria-multiselectable" | "aria-orientation" | "aria-owns" | "aria-placeholder" | "aria-posinset" | "aria-pressed" | "aria-readonly" | "aria-relevant" | "aria-required" | "aria-roledescription" | "aria-rowcount" | "aria-rowindex" | "aria-rowspan" | "aria-selected" | "aria-setsize" | "aria-sort" | "aria-valuemax" | "aria-valuemin" | "aria-valuenow" | "aria-valuetext" | "dangerouslySetInnerHTML" | "onCopy" | "onCopyCapture" | "onCut" | "onCutCapture" | "onPaste" | "onPasteCapture" | "onCompositionEnd" | "onCompositionEndCapture" | "onCompositionStart" | "onCompositionStartCapture" | "onCompositionUpdate" | "onCompositionUpdateCapture" | "onFocus" | "onFocusCapture" | "onBlur" | "onBlurCapture" | "onChange" | "onChangeCapture" | "onBeforeInput" | "onBeforeInputCapture" | "onInput" | "onInputCapture" | "onReset" | "onResetCapture" | "onSubmit" | "onSubmitCapture" | "onInvalid" | "onInvalidCapture" | "onLoad" | "onLoadCapture" | "onError" | "onErrorCapture" | "onKeyDown" | "onKeyDownCapture" | "onKeyPress" | "onKeyPressCapture" | "onKeyUp" | "onKeyUpCapture" | "onAbort" | "onAbortCapture" | "onCanPlay" | "onCanPlayCapture" | "onCanPlayThrough" | "onCanPlayThroughCapture" | "onDurationChange" | "onDurationChangeCapture" | "onEmptied" | "onEmptiedCapture" | "onEncrypted" | "onEncryptedCapture" | "onEnded" | "onEndedCapture" | "onLoadedData" | "onLoadedDataCapture" | "onLoadedMetadata" | "onLoadedMetadataCapture" | "onLoadStart" | "onLoadStartCapture" | "onPause" | "onPauseCapture" | "onPlay" | "onPlayCapture" | "onPlaying" | "onPlayingCapture" | "onProgress" | "onProgressCapture" | "onRateChange" | "onRateChangeCapture" | "onSeeked" | "onSeekedCapture" | "onSeeking" | "onSeekingCapture" | "onStalled" | "onStalledCapture" | "onSuspend" | "onSuspendCapture" | "onTimeUpdate" | "onTimeUpdateCapture" | "onVolumeChange" | "onVolumeChangeCapture" | "onWaiting" | "onWaitingCapture" | "onAuxClick" | "onAuxClickCapture" | "onClickCapture" | "onContextMenu" | "onContextMenuCapture" | "onDoubleClick" | "onDoubleClickCapture" | "onDrag" | "onDragCapture" | "onDragEnd" | "onDragEndCapture" | "onDragEnter" | "onDragEnterCapture" | "onDragExit" | "onDragExitCapture" | "onDragLeave" | "onDragLeaveCapture" | "onDragOver" | "onDragOverCapture" | "onDragStart" | "onDragStartCapture" | "onDrop" | "onDropCapture" | "onMouseDown" | "onMouseDownCapture" | "onMouseEnter" | "onMouseLeave" | "onMouseMove" | "onMouseMoveCapture" | "onMouseOut" | "onMouseOutCapture" | "onMouseOver" | "onMouseOverCapture" | "onMouseUp" | "onMouseUpCapture" | "onSelect" | "onSelectCapture" | "onTouchCancel" | "onTouchCancelCapture" | "onTouchEnd" | "onTouchEndCapture" | "onTouchMove" | "onTouchMoveCapture" | "onTouchStart" | "onTouchStartCapture" | "onPointerDown" | "onPointerDownCapture" | "onPointerMove" | "onPointerMoveCapture" | "onPointerUp" | "onPointerUpCapture" | "onPointerCancel" | "onPointerCancelCapture" | "onPointerEnter" | "onPointerEnterCapture" | "onPointerLeave" | "onPointerLeaveCapture" | "onPointerOver" | "onPointerOverCapture" | "onPointerOut" | "onPointerOutCapture" | "onGotPointerCapture" | "onGotPointerCaptureCapture" | "onLostPointerCapture" | "onLostPointerCaptureCapture" | "onScroll" | "onScrollCapture" | "onWheel" | "onWheelCapture" | "onAnimationStart" | "onAnimationStartCapture" | "onAnimationEnd" | "onAnimationEndCapture" | "onAnimationIteration" | "onAnimationIterationCapture" | "onTransitionEnd" | "onTransitionEndCapture" | "css">, Readonly<{
    font: {
        family: {
            main: string;
            code: string;
        };
        lineHeight: number;
        size: {
            title: number;
            body: number;
            small: number;
            fineprint: number;
            tiny: number;
        };
        weight: {
            regular: 400 | 500 | 600;
            medium: 400 | 500 | 600;
            bold: 400 | 500 | 600;
        };
    };
    space: {
        base: number;
        small: number;
        medium: number;
        content: number;
        element: number;
        big: number;
    };
    zIndex: {
        default: number;
        selectOptions: number;
        formFieldError: number;
        tooltip: number;
        modal: number;
        confirm: number;
        debugViewer: number;
        globalProgress: number;
        messages: number;
        switch: number;
    };
    color: {
        primary: string;
        disabled: string;
        warning: string;
        success: string;
        error: string;
        basic: string;
        ghost: string;
        white: string;
        highlight: string;
        black: string;
        background: {
            dark: string;
            mediumDark: string;
            light: string;
            lighter: string;
            lightest: string;
            almostWhite: string;
        };
        separators: {
            dark: string;
            default: string;
            light: string;
        };
        text: {
            dark: string;
            default: string;
            disabled: string;
            light: string;
            lighter: string;
            lightest: string;
            action: string;
            white: string;
        };
        border: {
            default: string;
            disabled: string;
            invisible: string;
            medium: string;
            lightest: string;
        };
        palette: string[];
    };
    shadows: {
        pressed: string;
        topBar: string;
        focus: string;
        insetFocus: string;
        popup: string;
        card: string;
    };
    borderRadius: number;
    compactSidebarWidth: number;
    sidebarWidth: number;
    topbarHeight: number;
    titleHeight: number;
}>>;
export declare const ControlledModalContent: import("@emotion/styled-base").StyledComponent<React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement>, {
    fullSize: boolean;
}, Readonly<{
    font: {
        family: {
            main: string;
            code: string;
        };
        lineHeight: number;
        size: {
            title: number;
            body: number;
            small: number;
            fineprint: number;
            tiny: number;
        };
        weight: {
            regular: 400 | 500 | 600;
            medium: 400 | 500 | 600;
            bold: 400 | 500 | 600;
        };
    };
    space: {
        base: number;
        small: number;
        medium: number;
        content: number;
        element: number;
        big: number;
    };
    zIndex: {
        default: number;
        selectOptions: number;
        formFieldError: number;
        tooltip: number;
        modal: number;
        confirm: number;
        debugViewer: number;
        globalProgress: number;
        messages: number;
        switch: number;
    };
    color: {
        primary: string;
        disabled: string;
        warning: string;
        success: string;
        error: string;
        basic: string;
        ghost: string;
        white: string;
        highlight: string;
        black: string;
        background: {
            dark: string;
            mediumDark: string;
            light: string;
            lighter: string;
            lightest: string;
            almostWhite: string;
        };
        separators: {
            dark: string;
            default: string;
            light: string;
        };
        text: {
            dark: string;
            default: string;
            disabled: string;
            light: string;
            lighter: string;
            lightest: string;
            action: string;
            white: string;
        };
        border: {
            default: string;
            disabled: string;
            invisible: string;
            medium: string;
            lightest: string;
        };
        palette: string[];
    };
    shadows: {
        pressed: string;
        topBar: string;
        focus: string;
        insetFocus: string;
        popup: string;
        card: string;
    };
    borderRadius: number;
    compactSidebarWidth: number;
    sidebarWidth: number;
    topbarHeight: number;
    titleHeight: number;
}>>;
export declare class Confirm<T> extends React.Component<Props, Readonly<State<T>>> {
    readonly state: State<T>;
    private openConfirm;
    private closeConfirm;
    private onCancelClick;
    private onActionClick;
    private setConfirmState;
    render(): JSX.Element;
}
export default Confirm;
