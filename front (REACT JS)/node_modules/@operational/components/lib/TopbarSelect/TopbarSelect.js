"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importStar(require("react"));
const ContextMenu_1 = __importDefault(require("../ContextMenu/ContextMenu"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const styled_1 = __importDefault(require("../utils/styled"));
const TopbarSelectContainer = styled_1.default("div") `
  line-height: 1;
  height: ${props => props.theme.topbarHeight}px;
  display: flex;
  align-items: center;
  padding: 0px ${props => props.theme.space.medium}px;
  box-shadow: ${props => (props.isActive ? props.theme.shadows.popup : "none")};
  border-bottom: ${props => (props.isActive ? "1px" : "0px")};
  border-color: ${props => props.theme.color.border.default};
  cursor: pointer;
  background-color: ${props => (props.isActive ? props.theme.color.white : "transparent")};
  :hover {
    background-color: ${props => (props.isActive ? props.theme.color.white : props.theme.color.background.lighter)};
  }
  & svg {
    /** Icons are purely presentational and click events are handled upstream */
    pointer-events: none;
  }
`;
const TopbarSelectValue = styled_1.default("div") `
  padding: 0px ${props => props.theme.space.base}px;
  font-size: ${props => props.theme.font.size.fineprint}px;
  display: flex;
  align-items: center;
  color: ${props => props.theme.color.text.dark};
  & > :first-child {
    margin-right: ${props => props.theme.space.element}px;
  }
`;
const TopbarSelectValueSpan = styled_1.default("span") `
  color: ${props => (props.active ? props.theme.color.text.dark : props.theme.color.text.lighter)};
`;
const TopbarSelectLabel = styled_1.default("p") `
  margin: 0px ${props => props.theme.space.base}px 0px 0px;
  font-size: ${props => props.theme.font.size.fineprint}px;
  color: ${props => props.theme.color.text.lightest};
  font-weight: ${props => props.theme.font.weight.medium};
`;
const TopbarSelect = (_a) => {
    var { label, selected, items, onChange } = _a, props = __rest(_a, ["label", "selected", "items", "onChange"]);
    const [containerWidth, setContainerWidth] = react_1.useState(0);
    const containerRef = react_1.useRef(null);
    react_1.useLayoutEffect(() => {
        if (containerRef.current) {
            setContainerWidth(containerRef.current.clientWidth);
        }
    });
    return (react_1.default.createElement(ContextMenu_1.default, { condensed: true, items: items, width: containerWidth, onClick: newItem => {
            if (onChange) {
                onChange(newItem.label);
            }
        } }, isActive => (react_1.default.createElement(TopbarSelectContainer, Object.assign({}, props, { isActive: isActive, ref: containerRef }),
        react_1.default.createElement(TopbarSelectLabel, null, label),
        react_1.default.createElement(TopbarSelectValue, null,
            react_1.default.createElement(TopbarSelectValueSpan, { active: Boolean(selected) }, selected),
            react_1.default.createElement(Icon_1.default, { color: "color.text.lightest", name: isActive ? "CaretUp" : "CaretDown", size: 12 }))))));
};
exports.default = TopbarSelect;
//# sourceMappingURL=TopbarSelect.js.map