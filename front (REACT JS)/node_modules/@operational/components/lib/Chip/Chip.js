"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const tinycolor2_1 = __importDefault(require("tinycolor2"));
const __1 = require("../");
const utils_1 = require("../utils");
const constants_1 = require("../utils/constants");
const styled_1 = __importDefault(require("../utils/styled"));
const height = 20;
const Container = styled_1.default("div")(({ theme, color_ }) => {
    const backgroundColor = tinycolor2_1.default(constants_1.expandColor(theme, color_) || theme.color.primary)
        .setAlpha(0.1)
        .toString();
    return {
        backgroundColor,
        border: 0,
        padding: 0,
        fontSize: theme.font.size.small,
        fontWeight: theme.font.weight.medium,
        label: "chip",
        position: "relative",
        height,
        display: "inline-flex",
        alignItems: "center",
        boxSizing: "border-box",
        width: "fit-content",
        borderRadius: 2,
        color: theme.color.text.default,
        margin: `0px ${theme.space.small}px 0px 0px`,
    };
});
const getInteractiveStyle = (theme, onClick) => (Object.assign({}, (Boolean(onClick)
    ? {
        "&:hover": {
            backgroundColor: "rgba(0, 0, 0, 0.1)",
        },
        "&:focus": utils_1.inputFocus({ theme }),
    }
    : {})));
const Content = styled_1.default("div")(({ theme, onClick }) => (Object.assign({ height, display: "flex", backgroundColor: "transparent", font: "inherit", color: "inherit", border: 0, alignItems: "center", padding: `0px ${theme.space.base}px`, cursor: Boolean(onClick) ? "pointer" : "initial" }, getInteractiveStyle(theme, onClick))));
const Action = styled_1.default("button")(({ theme, onClick }) => {
    return Object.assign({ border: 0, backgroundColor: "transparent", font: "inherit", color: "inherit", padding: 0, borderLeft: `1px solid ${theme.color.ghost}`, width: theme.space.element, display: "flex", alignItems: "center", justifyContent: "center", height, cursor: Boolean(onClick) ? "pointer" : "initial" }, getInteractiveStyle(theme, onClick));
});
const Chip = (_a) => {
    var { onClick, onIconClick, icon, children } = _a, props = __rest(_a, ["onClick", "onIconClick", "icon", "children"]);
    return (React.createElement(Container, Object.assign({ color_: props.color }, props),
        React.createElement(Content, { "aria-label": typeof children === "string" ? children : undefined, role: Boolean(onClick) ? "button" : undefined, as: Boolean(onClick) ? "button" : "div", onClick: onClick }, children),
        onIconClick && (React.createElement(Action, { "aria-label": typeof icon === "string" ? icon : undefined, role: "button", onClick: onIconClick }, typeof icon === "string" ? React.createElement(__1.Icon, { name: icon, size: 12 }) : icon))));
};
exports.default = Chip;
//# sourceMappingURL=Chip.js.map