"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const case_1 = require("case");
const React = __importStar(require("react"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const Body_1 = require("../Typography/Body");
const utils_1 = require("../utils");
const styled_1 = __importDefault(require("../utils/styled"));
const Container = styled_1.default("div") `
  display: flex;
  align-items: center;
  margin-bottom: ${({ theme }) => theme.space.element}px;
`;
const Box = styled_1.default("button") `
  width: ${({ condensed }) => (condensed ? 32 : 120)}px;
  height: ${({ condensed }) => (condensed ? 32 : 80)}px;
  border: 1px solid ${({ theme, isActive }) => (isActive ? theme.color.primary : theme.color.border.disabled)};
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
  border-radius: 2px;
  cursor: ${({ onClick }) => (Boolean(onClick) ? "pointer" : "initial")};
  padding: 0 ${({ theme }) => theme.space.small}px;
  text-align: center;
  word-wrap: break-word;

  :hover {
    border-color: ${({ theme }) => theme.color.border.default};
  }

  :focus {
    ${({ theme }) => utils_1.inputFocus({ theme, isError: false })}
  }
`;
const Label = styled_1.default(Body_1.Body) `
  font-weight: bold;
  margin: 10px 0 0;
`;
const NextArrow = styled_1.default("div") `
  width: 0;
  height: 0;
  border: 6px solid transparent;
  border-left-color: ${({ theme }) => theme.color.border.disabled};
  margin: 0 0 0 ${({ theme }) => theme.space.small}px;
`;
const FlowIcon = styled_1.default(Icon_1.default) `
  pointer-events: none;
`;
const getIconColor = (currentIndex, activeItemIndex, iconColor) => {
    if (iconColor) {
        return iconColor;
    }
    if (typeof activeItemIndex === "undefined") {
        return "primary";
    }
    if (currentIndex === activeItemIndex) {
        return "primary";
    }
    return "color.border.default";
};
const Flow = ({ items, condensed, activeItemIndex }) => (React.createElement(Container, null, items.map((item, index) => (React.createElement(React.Fragment, { key: index },
    React.createElement(Box, { "aria-label": typeof item.label === "string" ? item.label : undefined, role: item.onClick ? "button" : undefined, tabIndex: 0, "data-cy": `operational-ui__flow flow__box box-${typeof item.label === "string" ? case_1.kebab(item.label) : case_1.kebab(item.description || "")}`, isActive: activeItemIndex === index, condensed: Boolean(condensed), onClick: Boolean(item.onClick)
            ? () => {
                if (item.onClick) {
                    item.onClick(item);
                }
            }
            : undefined },
        item.icon && typeof item.icon === "string" ? (React.createElement(FlowIcon, { size: condensed ? 16 : 22, name: item.icon, color: getIconColor(index, activeItemIndex, item.iconColor) })) : (item.icon),
        !condensed && React.createElement(Label, null, item.label)),
    index !== items.length - 1 && React.createElement(NextArrow, null))))));
exports.default = Flow;
//# sourceMappingURL=Flow.js.map