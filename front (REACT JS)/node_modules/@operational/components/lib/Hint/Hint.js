"use strict";
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const React = __importStar(require("react"));
const styled_1 = __importDefault(require("../utils/styled"));
const Icon_1 = __importDefault(require("../Icon/Icon"));
const Tooltip_1 = __importDefault(require("../Tooltip/Tooltip"));
const mixins_1 = require("../utils/mixins");
const Container = styled_1.default("div")(({ left, right, theme }) => (Object.assign({ position: "relative", display: "inline-flex", verticalAlign: "middle", alignItems: "center", color: theme.color.text.lightest, marginRight: left ? theme.space.base : 0, marginLeft: right ? theme.space.base : 0 }, mixins_1.hoverTooltip)));
const HintTooltip = props => {
    switch (props.position) {
        case "right":
            return React.createElement(Tooltip_1.default, Object.assign({ right: true }, props));
        case "top":
            return React.createElement(Tooltip_1.default, Object.assign({ top: true }, props));
        case "bottom":
            return React.createElement(Tooltip_1.default, Object.assign({ bottom: true }, props));
        case "left":
            return React.createElement(Tooltip_1.default, Object.assign({ left: true }, props));
        case "smart":
            return React.createElement(Tooltip_1.default, Object.assign({ smart: true }, props));
        default:
            return null;
    }
};
const Hint = props => (React.createElement(Container, Object.assign({ "aria-label": typeof props.children === "string" ? props.children : undefined }, props),
    React.createElement(Icon_1.default, { name: "Question", size: 12 }),
    React.createElement(HintTooltip, { position: props.tooltipPosition, textId: props.textId }, props.children)));
Hint.defaultProps = {
    tooltipPosition: "left",
};
exports.default = Hint;
//# sourceMappingURL=Hint.js.map