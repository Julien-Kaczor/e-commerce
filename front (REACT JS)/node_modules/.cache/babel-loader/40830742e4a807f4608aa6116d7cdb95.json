{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst tinycolor2_1 = __importDefault(require(\"tinycolor2\"));\n\nconst styled_1 = __importDefault(require(\"../utils/styled\"));\n\nconst makeContainerPositionStyles = position => {\n  switch (position) {\n    case \"top\":\n      return {\n        left: \"50%\",\n        top: -6,\n        transform: \"translate3d(-50%, -100%, 0)\"\n      };\n\n    case \"bottom\":\n      return {\n        left: \"50%\",\n        top: \"100%\",\n        transform: \"translate3d(-50%, 6px, 0)\"\n      };\n\n    case \"left\":\n      return {\n        // 1px nudge fixes visual misalignment for carets that are rendered at half-pixel\n        top: \"calc(50% - 1px)\",\n        left: -6,\n        transform: \"translate3d(-100%, -50%, 0)\"\n      };\n\n    case \"right\":\n      return {\n        // 1px nudge fixes visual misalignment for carets that are rendered at half-pixel\n        top: \"calc(50% - 1px)\",\n        right: -6,\n        transform: \"translate3d(100%, -50%, 0)\"\n      };\n  }\n};\n\nconst makeCaretPositionStyles = (position, backgroundColor) => {\n  switch (position) {\n    case \"top\":\n      return {\n        bottom: -4,\n        left: \"calc(50% - 6px)\",\n        borderLeft: \"6px solid transparent\",\n        borderRight: \"6px solid transparent\",\n        borderTop: \"6px solid \".concat(backgroundColor)\n      };\n\n    case \"bottom\":\n      return {\n        top: -4,\n        left: \"calc(50% - 6px)\",\n        borderLeft: \"6px solid transparent\",\n        borderRight: \"6px solid transparent\",\n        borderBottom: \"6px solid \".concat(backgroundColor)\n      };\n\n    case \"left\":\n      return {\n        right: -4,\n        top: \"calc(50% - 6px)\",\n        borderTop: \"6px solid transparent\",\n        borderBottom: \"6px solid transparent\",\n        borderLeft: \"6px solid \".concat(backgroundColor)\n      };\n\n    case \"right\":\n      return {\n        left: -4,\n        top: \"calc(50% - 6px)\",\n        borderTop: \"6px solid transparent\",\n        borderBottom: \"6px solid transparent\",\n        borderRight: \"6px solid \".concat(backgroundColor)\n      };\n  }\n};\n\nexports.Container = styled_1.default(\"div\")(({\n  position,\n  offScreenWidthTest,\n  singleLineTextWidth,\n  theme\n}) => {\n  const backgroundColor = tinycolor2_1.default(theme.color.black).setAlpha(0.9).toString();\n  return Object.assign({\n    backgroundColor,\n    label: \"tooltip\",\n    color: theme.color.white,\n    position: \"absolute\",\n    zIndex: theme.zIndex.tooltip,\n    borderRadius: 2,\n    boxShadow: \"0 2px 6px rgba(0, 0, 0, .15)\"\n  }, offScreenWidthTest ? {\n    width: \"fit-content\",\n    whiteSpace: \"nowrap\",\n    position: \"fixed\",\n    visibility: \"hidden\",\n    top: -200,\n    left: -200\n  } : {\n    // If there was an issue determining singleLineTextWidth, default to the 150px width\n    // Otherwise, honor the single line text width unless greater than 150px.\n    width: singleLineTextWidth === 0 ? 150 : Math.min(singleLineTextWidth + 4, 150)\n  }, makeContainerPositionStyles(position), {\n    // This pseudo-element extends the clickable area of a tooltip extending enough to disappear as the mouse moves over to the caret.\n    \"&::after\": {\n      content: \"''\",\n      position: \"absolute\",\n      top: 0,\n      left: -32,\n      display: \"block\",\n      width: 32,\n      height: \"100%\"\n    },\n    // They say behind every great tooltip is a great caret.\n    \"&::before\": Object.assign({\n      content: \"''\",\n      position: \"absolute\",\n      zIndex: theme.zIndex.tooltip,\n      width: 0,\n      height: 0\n    }, makeCaretPositionStyles(position, backgroundColor))\n  });\n});\nexports.default = exports.Container;","map":null,"metadata":{},"sourceType":"script"}