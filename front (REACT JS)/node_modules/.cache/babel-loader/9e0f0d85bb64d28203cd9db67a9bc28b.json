{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/julien-pc/Bureau/PROJECT/e-commerce/front/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  position: relative;\\n  min-height: 60px;\\n  height: 100%;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst core_1 = require(\"@emotion/core\");\n\nconst emotion_theming_1 = require(\"emotion-theming\");\n\nconst merge_1 = __importDefault(require(\"lodash/merge\"));\n\nconst React = __importStar(require(\"react\"));\n\nconst ErrorBoundary_1 = __importDefault(require(\"../Internals/ErrorBoundary\"));\n\nconst Message_1 = __importDefault(require(\"../Internals/Message/Message\"));\n\nconst Messages_1 = __importDefault(require(\"../Internals/Messages/Messages\"));\n\nconst OperationalContext_1 = require(\"../OperationalContext/OperationalContext\");\n\nconst Progress_1 = __importDefault(require(\"../Progress/Progress\"));\n\nconst utils_1 = require(\"../utils\");\n\nconst constants_1 = __importDefault(require(\"../utils/constants\"));\n\nconst styled_1 = __importDefault(require(\"../utils/styled\"));\n\nconst baseStylesheet = theme => \"\\n* {\\n  box-sizing: border-box;\\n  text-rendering: optimizeLegibility;\\n  -webkit-font-smoothing: antialiased;\\n  font-smoothing: antialiased;\\n}\\n\\nhtml,\\nbody {\\n  margin: 0;\\n  padding: 0;\\n  font-family: \".concat(theme.font.family.main, \";\\n  font-size: 13px;\\n  height: 100%;\\n}\\n\\nbody {\\n  background-color: white;\\n}\\n\\na:link,\\na:visited {\\n  color: \").concat(theme.color.primary, \";\\n  text-decoration: none;\\n}\\n\\na:hover: {\\n  color: \").concat(utils_1.darken(theme.color.primary, 5), \";\\n}\\n\\nul, ol {\\n  margin: 0 0 0 \").concat(theme.space.content, \"px;\\n  padding: 0;\\n}\\n\");\n\nconst Container = styled_1.default(\"div\")(_templateObject());\n\nconst colorByMessageType = type => {\n  switch (type) {\n    case \"info\":\n      return \"primary\";\n\n    case \"success\":\n      return \"success\";\n\n    case \"error\":\n      return \"error\";\n  }\n};\n\nclass OperationalUI extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      messages: [],\n      isLoading: false\n    };\n    /**\n     *  The interval responsible for periodically checking\n     *  whether any messages need to be removed from state\n     */\n\n    this.messageTimerInterval = null;\n\n    this.setLoading = isLoading => {\n      this.setState(() => ({\n        isLoading\n      }));\n    };\n\n    this.pushMessage = message => {\n      const hasSamePayload = m => m.message.body === message.body && m.message.type === message.type;\n\n      this.setState(prevState => {\n        const hasPreviousMessageWithSamePayload = Boolean(prevState.messages.find(hasSamePayload));\n\n        if (hasPreviousMessageWithSamePayload) {\n          return {\n            messages: prevState.messages.map(m => {\n              if (hasSamePayload(m)) {\n                return Object.assign({}, m, {\n                  addedAt: new Date().getTime(),\n                  count: m.count + 1\n                });\n              } else {\n                return m;\n              }\n            })\n          };\n        }\n\n        return {\n          messages: [{\n            message,\n            addedAt: new Date().getTime(),\n            count: 1\n          }, ...prevState.messages]\n        };\n      }); // If we don't yet have an interval, start one.\n\n      if (!this.messageTimerInterval) {\n        this.messageTimerInterval = setInterval(() => this.removeOutdatedMessages(), 2000);\n      }\n    };\n\n    this.clearMessages = () => {\n      this.setState({\n        messages: []\n      });\n    };\n  }\n\n  removeOutdatedMessages() {\n    if (this.props.hideMessageAfter === 0) {\n      return;\n    }\n\n    const now = new Date().getTime();\n    const filteredMessages = this.state.messages.filter(({\n      message,\n      addedAt\n    }) => message.type === \"error\" || now - addedAt < (this.props.hideMessageAfter || 10000)); // If we're out of messages, clear the interval.\n\n    if (!filteredMessages.length && this.messageTimerInterval) {\n      clearInterval(this.messageTimerInterval);\n      this.messageTimerInterval = null;\n    } // Only run a setState if any message(s) were removed.\n\n\n    if (this.state.messages.length > filteredMessages.length) {\n      this.setState(() => ({\n        messages: filteredMessages\n      }));\n    }\n  }\n\n  componentDidCatch(error) {\n    this.setState({\n      error\n    });\n\n    if (this.props.onError) {\n      this.props.onError(error);\n    }\n  }\n\n  componentWillUnmount() {\n    if (this.messageTimerInterval) {\n      clearInterval(this.messageTimerInterval);\n    }\n  }\n\n  render() {\n    const _this$props = this.props,\n          pushState = _this$props.pushState,\n          replaceState = _this$props.replaceState,\n          children = _this$props.children,\n          theme = _this$props.theme,\n          errorBoundary = _this$props.errorBoundary;\n    return React.createElement(emotion_theming_1.ThemeProvider, {\n      theme: merge_1.default(constants_1.default, theme)\n    }, this.state.error && errorBoundary !== false ? React.createElement(ErrorBoundary_1.default, {\n      error: this.state.error\n    }) : React.createElement(OperationalContext_1.Provider, {\n      value: {\n        pushState,\n        replaceState,\n        pushMessage: this.pushMessage,\n        clearMessages: this.clearMessages,\n        loading: this.state.isLoading,\n        setLoading: this.setLoading\n      }\n    }, !this.props.noBaseStyles && React.createElement(core_1.Global, {\n      styles: baseStylesheet(merge_1.default(constants_1.default, theme))\n    }), React.createElement(Container, null, this.state.isLoading && React.createElement(Progress_1.default, null), React.createElement(Messages_1.default, null, this.state.messages.map(({\n      message,\n      count\n    }, index) => React.createElement(Message_1.default, {\n      key: index,\n      color: colorByMessageType(message.type),\n      onClick: message.onClick,\n      onClose: () => this.setState(prevState => ({\n        messages: prevState.messages.filter((_, filteredMessageIndex) => filteredMessageIndex !== index)\n      }))\n    }, count > 1 ? \"(\".concat(count, \") \") : \"\", message.body))), children)));\n  }\n\n}\n\nOperationalUI.defaultProps = {\n  theme: {},\n  errorBoundary: true\n};\nexports.default = OperationalUI;","map":null,"metadata":{},"sourceType":"script"}