{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst Hint_1 = __importDefault(require(\"../Hint/Hint\"));\n\nconst Icon_1 = __importDefault(require(\"../Icon/Icon\"));\n\nconst LabelText_1 = require(\"../LabelText/LabelText\");\n\nconst useUniqueId_1 = require(\"../useUniqueId\");\n\nconst mixins_1 = require(\"../utils/mixins\");\n\nconst Input_Field_1 = __importDefault(require(\"./Input.Field\"));\n\nconst Input = _a => {\n  var id = _a.id,\n      tabIndex = _a.tabIndex,\n      fullWidth = _a.fullWidth,\n      label = _a.label,\n      labelId = _a.labelId,\n      hint = _a.hint,\n      onToggle = _a.onToggle,\n      disabled = _a.disabled,\n      errorComponent = _a.errorComponent,\n      props = __rest(_a, [\"id\", \"tabIndex\", \"fullWidth\", \"label\", \"labelId\", \"hint\", \"onToggle\", \"disabled\", \"errorComponent\"]);\n\n  const uniqueId = useUniqueId_1.useUniqueId(id);\n  const Field = React.createElement(Input_Field_1.default, Object.assign({\n    hint: hint,\n    tabIndex: tabIndex,\n    label: label,\n    id: uniqueId,\n    fullWidth: fullWidth,\n    disabled: disabled,\n    \"aria-labelledby\": label ? \"input-label-\".concat(uniqueId) : undefined,\n    \"aria-describedby\": hint ? \"input-hint-\".concat(uniqueId) : undefined,\n    \"aria-label\": label,\n    errorComponent: errorComponent\n  }, props));\n\n  if (label) {\n    return React.createElement(mixins_1.Label, {\n      fullWidth: fullWidth,\n      id: uniqueId ? \"input-label-\".concat(uniqueId) : \"input-label-\".concat(label)\n    }, React.createElement(LabelText_1.LabelText, null, label), (hint || onToggle) && React.createElement(mixins_1.FormFieldControls, null, hint && React.createElement(Hint_1.default, {\n      textId: \"input-hint-\".concat(uniqueId)\n    }, hint), onToggle && React.createElement(mixins_1.FormFieldControl, {\n      onClick: () => {\n        if (onToggle) {\n          onToggle();\n        }\n      }\n    }, React.createElement(Icon_1.default, {\n      name: disabled ? \"Lock\" : \"Unlock\",\n      size: 12\n    }))), Field);\n  }\n\n  return Field;\n};\n\nexports.default = Input;","map":null,"metadata":{},"sourceType":"script"}