{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/julien-pc/Bureau/PROJECT/e-commerce/front/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  user-select: none;\\n  & & {\\n    margin-left: \", \"px;\\n  }\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst react_beautiful_dnd_1 = require(\"react-beautiful-dnd\");\n\nconst styled_1 = __importDefault(require(\"../utils/styled\"));\n\nconst ChildTree_1 = __importDefault(require(\"./ChildTree\"));\n\nconst Container = styled_1.default(\"div\")(_templateObject(), ({\n  theme\n}) => theme.space.content);\n\nconst Tree = ({\n  trees,\n  droppableProps,\n  placeholder\n}) => {\n  const isLowestLevel = trees.length === 0 || trees.some(tree => !tree.childNodes || !tree.childNodes.length);\n  /**\n   * If this is a category with children, no drag and drop\n   * because only children can be dragged/sorted.\n   */\n\n  if (!isLowestLevel || !droppableProps) {\n    return React.createElement(Container, null, trees.map((treeData, index) => React.createElement(ChildTree_1.default, Object.assign({\n      key: index\n    }, treeData))));\n  }\n\n  return React.createElement(react_beautiful_dnd_1.Droppable, Object.assign({}, droppableProps), (droppableProvided, droppableSnapshot) => React.createElement(Container, Object.assign({\n    ref: droppableProvided.innerRef\n  }, droppableProvided.droppableProps), trees.length ? React.createElement(React.Fragment, null, trees.map((treeData, index) => React.createElement(react_beautiful_dnd_1.Draggable, Object.assign({\n    key: index\n  }, treeData.draggableProps || {\n    draggableId: treeData.label\n  }, {\n    index: index\n  }), draggableProvided => {\n    return React.createElement(ChildTree_1.default, Object.assign({\n      forwardRef: draggableProvided.innerRef\n    }, treeData, draggableProvided.draggableProps, draggableProvided.dragHandleProps));\n  }))) : placeholder && React.createElement(placeholder, droppableSnapshot), droppableProvided.placeholder));\n};\n\nexports.default = Tree;","map":null,"metadata":{},"sourceType":"script"}