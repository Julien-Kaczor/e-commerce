{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = require(\"react\");\n/**\n * Hook for linking some hotkey to a callback function\n *\n * @param containerNode - A ref to an HTMLElement, scoping the hotkey binding\n * @param key - hotkey definition object\n * @param callback- a callback to be invoked when the hotkey is hit\n *\n */\n\n\nfunction useHotkey(containerNode, hotkey, callback) {\n  const callbackRef = react_1.useRef(callback);\n  react_1.useEffect(() => {\n    callbackRef.current = callback;\n  }, [callback]);\n  react_1.useEffect(() => {\n    const addKeyBinding = () => {\n      if (containerNode.current) {\n        containerNode.current.addEventListener(\"keydown\", keyDownHandler, true);\n      }\n    };\n\n    const removeKeyBinding = () => {\n      if (containerNode.current) {\n        containerNode.current.removeEventListener(\"keydown\", keyDownHandler, true);\n      }\n    };\n\n    const keyDownHandler = event => {\n      if (event.key.toLowerCase() !== hotkey.key.toLowerCase()) {\n        return;\n      }\n\n      if (hotkey.ctrl && !event.ctrlKey) {\n        return;\n      }\n\n      if (hotkey.shift && !event.shiftKey) {\n        return;\n      }\n\n      if (hotkey.alt && !event.altKey) {\n        return;\n      }\n\n      if (hotkey.meta && !event.metaKey) {\n        return;\n      }\n\n      event.stopPropagation();\n      callbackRef.current();\n    };\n\n    addKeyBinding();\n    return removeKeyBinding;\n  }, [containerNode.current]);\n}\n\nexports.useHotkey = useHotkey;\nexports.default = useHotkey;","map":null,"metadata":{},"sourceType":"script"}