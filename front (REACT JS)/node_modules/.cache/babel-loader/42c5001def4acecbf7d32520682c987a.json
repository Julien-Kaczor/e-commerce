{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/julien-pc/Bureau/PROJECT/e-commerce/front/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst react_copy_to_clipboard_1 = __importDefault(require(\"react-copy-to-clipboard\"));\n\nconst Hint_1 = __importDefault(require(\"../Hint/Hint\"));\n\nconst Icon_1 = __importDefault(require(\"../Icon/Icon\"));\n\nconst LabelText_1 = require(\"../LabelText/LabelText\");\n\nconst OperationalContext_1 = require(\"../OperationalContext/OperationalContext\");\n\nconst useUniqueId_1 = require(\"../useUniqueId\");\n\nconst utils_1 = require(\"../utils\");\n\nconst mixins_1 = require(\"../utils/mixins\");\n\nconst styled_1 = __importDefault(require(\"../utils/styled\"));\n\nconst TextareaComp = styled_1.default(\"textarea\")(_a => {\n  var theme = _a.theme,\n      isCode = _a.isCode,\n      resize = _a.resize,\n      autoFocus = _a.autoFocus,\n      height = _a.height,\n      props = __rest(_a, [\"theme\", \"isCode\", \"resize\", \"autoFocus\", \"height\"]);\n\n  return Object.assign({\n    height,\n    resize,\n    autofocus: autoFocus,\n    fontSize: theme.font.size.body,\n    fontWeight: theme.font.weight.regular,\n    display: \"block\",\n    width: \"100%\",\n    minHeight: 120,\n    padding: \"\".concat(theme.space.small, \"px \").concat(theme.space.medium, \"px\"),\n    fontFamily: isCode ? \"monospace\" : theme.font.family.main,\n    outline: \"none\",\n    border: \"none\",\n    // There's an white subpixel if it's theme.borderRadius and no noticeable regression if -1\n    borderRadius: theme.borderRadius - 1\n  }, props);\n});\nconst ActionHeader = styled_1.default(\"div\")(({\n  theme\n}) => ({\n  fontSize: theme.font.size.fineprint,\n  color: theme.color.text.lighter,\n  backgroundColor: theme.color.background.lighter,\n  padding: \"\".concat(theme.space.base, \"px \").concat(theme.space.small, \"px\"),\n  width: \"100%\",\n  display: \"flex\",\n  justifyContent: \"flex-end\",\n  borderTopLeftRadius: theme.borderRadius - 1,\n  borderTopRightRadius: theme.borderRadius - 1,\n\n  /**\n   * Use case: External Links typically have <Icon/>s next to them.\n   */\n  \"& a\": {\n    display: \"inline-flex\",\n    alignItems: \"center\",\n    color: theme.color.primary,\n    cursor: \"pointer\",\n    \"&:hover\": {\n      textDecoration: \"underline\"\n    }\n  },\n  \"& svg\": {\n    margin: \"0 \".concat(theme.space.base, \"px\"),\n    width: 10,\n    height: 10,\n    cursor: \"pointer\"\n  }\n}));\nconst Outline = styled_1.default(\"div\")(({\n  theme,\n  error,\n  focus,\n  disabled\n}) => ({\n  boxShadow: focus ? \"0 0 0 3px \".concat(error ? utils_1.lighten(theme.color.error, 60) : utils_1.lighten(theme.color.primary, 40)) : \"initial\",\n  borderRadius: theme.borderRadius,\n  border: \"\".concat(theme.color.border.default, \" 1px solid\"),\n  borderColor: error ? theme.color.error : theme.color.border.default,\n  opacity: disabled ? 0.6 : 1.0\n}));\nconst FormFieldError = styled_1.default(\"div\")(({\n  theme\n}) => ({\n  fontSize: theme.font.size.fineprint,\n  color: theme.color.error,\n  padding: \"\".concat(theme.space.base / 2, \"px \").concat(theme.space.medium, \"px\"),\n  marginBottom: 0,\n  width: \"100%\",\n  borderBottomLeftRadius: theme.borderRadius - 1,\n  borderBottomRightRadius: theme.borderRadius - 1,\n  backgroundColor: utils_1.lighten(theme.color.error, 60)\n}));\n\nconst Textarea = _a => {\n  var id = _a.id,\n      fullWidth = _a.fullWidth,\n      label = _a.label,\n      hint = _a.hint,\n      value = _a.value,\n      autoFocus = _a.autoFocus,\n      error = _a.error,\n      action = _a.action,\n      height = _a.height,\n      onChange = _a.onChange,\n      onSubmit = _a.onSubmit,\n      onFocus = _a.onFocus,\n      onBlur = _a.onBlur,\n      _a$disabled = _a.disabled,\n      disabled = _a$disabled === void 0 ? false : _a$disabled,\n      _a$code = _a.code,\n      code = _a$code === void 0 ? false : _a$code,\n      _a$copy = _a.copy,\n      copy = _a$copy === void 0 ? false : _a$copy,\n      _a$resize = _a.resize,\n      resize = _a$resize === void 0 ? \"vertical\" : _a$resize,\n      tabIndex = _a.tabIndex,\n      placeholder = _a.placeholder,\n      props = __rest(_a, [\"id\", \"fullWidth\", \"label\", \"hint\", \"value\", \"autoFocus\", \"error\", \"action\", \"height\", \"onChange\", \"onSubmit\", \"onFocus\", \"onBlur\", \"disabled\", \"code\", \"copy\", \"resize\", \"tabIndex\", \"placeholder\"]);\n\n  const _OperationalContext_ = OperationalContext_1.useOperationalContext(),\n        pushMessage = _OperationalContext_.pushMessage;\n\n  const uniqueId = useUniqueId_1.useUniqueId(id);\n\n  const _React$useState = React.useState(false),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        focus = _React$useState2[0],\n        setFocus = _React$useState2[1];\n\n  const focusHandler = ev => {\n    setFocus(true);\n\n    if (onFocus) {\n      onFocus(ev);\n    }\n  };\n\n  const blurHandler = ev => {\n    setFocus(false);\n\n    if (onBlur) {\n      onBlur(ev);\n    }\n  };\n\n  return React.createElement(mixins_1.Label, {\n    id: \"textarea-label-\".concat(uniqueId),\n    fullWidth: fullWidth\n  }, label && React.createElement(LabelText_1.LabelText, null, label), hint && React.createElement(mixins_1.FormFieldControls, null, React.createElement(Hint_1.default, {\n    textId: \"textarea-hint-\".concat(uniqueId)\n  }, hint)), React.createElement(Outline, {\n    focus: focus,\n    error: Boolean(error),\n    disabled: disabled\n  }, (action || copy) && React.createElement(ActionHeader, null, action, copy && React.createElement(react_copy_to_clipboard_1.default, {\n    text: value,\n    onCopy: () => pushMessage({\n      type: \"success\",\n      body: \"Successfully Copied\"\n    })\n  }, React.createElement(\"div\", {\n    role: \"button\",\n    \"aria-label\": \"Copy to Clipboard\"\n  }, React.createElement(Icon_1.default, {\n    size: 8,\n    name: \"Copy\"\n  }), React.createElement(\"a\", null, \"Copy to clipboard\")))), React.createElement(TextareaComp, Object.assign({\n    id: \"textarea-field-\".concat(uniqueId),\n    \"aria-label\": label ? label : undefined,\n    \"aria-labelledby\": \"textarea-label-\".concat(uniqueId),\n    \"aria-describedby\": hint ? \"textarea-hint-\".concat(uniqueId) : undefined,\n    disabled: disabled,\n    isCode: code,\n    value: value,\n    autoFocus: autoFocus,\n    resize: resize,\n    height: height,\n    tabIndex: tabIndex,\n    placeholder: placeholder,\n    onFocus: focusHandler,\n    onBlur: blurHandler,\n    onKeyDown: ev => {\n      if (utils_1.isCmdEnter(ev) && onSubmit) {\n        onSubmit();\n      }\n    },\n    onChange: e => {\n      if (!onChange) {\n        return;\n      }\n\n      onChange(e.target.value);\n    }\n  }, props)), error && React.createElement(FormFieldError, null, error)));\n};\n\nexports.default = Textarea;","map":null,"metadata":{},"sourceType":"script"}