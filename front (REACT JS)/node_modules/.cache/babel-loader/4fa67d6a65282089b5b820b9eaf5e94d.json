{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst __1 = require(\"../\");\n\nconst LabelText_1 = require(\"../LabelText/LabelText\");\n\nconst mixins_1 = require(\"../utils/mixins\");\n\nconst utils_1 = require(\"../utils\");\n\nconst DatePicker_Month_1 = __importDefault(require(\"./DatePicker.Month\"));\n\nconst DatePicker_styles_1 = require(\"./DatePicker.styles\");\n\nconst DatePicker_utils_1 = require(\"./DatePicker.utils\");\n\nclass DatePicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.validate(props); // Start year month is either based on the start date\n    // or the current month if no start date is specified.\n\n    const startYearMonthInWidget = props.start ? {\n      year: DatePicker_utils_1.toYearMonthDay(props.start).year,\n      month: DatePicker_utils_1.toYearMonthDay(props.start).month\n    } : {\n      year: new Date().getFullYear(),\n      month: new Date().getMonth()\n    };\n    this.state = Object.assign({}, startYearMonthInWidget, {\n      isExpanded: false\n    });\n  } // Optional props argument is used when the component doesn't have\n  // these dates on the instance (e.g. constructor).\n\n\n  validate(props) {\n    const validatedProps = props || this.props; // Validate start date of\n\n    if (validatedProps.start) {\n      DatePicker_utils_1.validateDateString(validatedProps.start);\n    }\n\n    if (validatedProps.end) {\n      DatePicker_utils_1.validateDateString(validatedProps.end);\n    }\n  }\n\n  changeMonth(diff) {\n    this.setState(prevState => DatePicker_utils_1.changeMonth(diff, {\n      month: prevState.month,\n      year: prevState.year\n    }));\n  }\n\n  componentDidMount() {\n    this.keypressHandler = ev => {\n      if (ev.keyCode !== utils_1.keyCodes.esc) {\n        return;\n      }\n\n      this.setState(prevState => Object.assign({}, prevState, {\n        isExpanded: false\n      }));\n\n      if (this.inputNode) {\n        this.inputNode.blur();\n      }\n    };\n\n    this.outsideClickHandler = ev => {\n      if (this.containerNode && (this.containerNode === ev.target || this.containerNode.contains(ev.target))) {\n        return;\n      }\n\n      this.setState(prevState => Object.assign({}, prevState, {\n        isExpanded: false\n      }));\n    };\n\n    document.addEventListener(\"click\", this.outsideClickHandler);\n    document.addEventListener(\"keydown\", this.keypressHandler);\n  }\n\n  componentDidUpdate() {\n    this.validate();\n  }\n\n  componentWillUnmount() {\n    if (this.outsideClickHandler) {\n      document.removeEventListener(\"click\", this.outsideClickHandler);\n    }\n\n    if (this.keypressHandler) {\n      document.removeEventListener(\"keydown\", this.keypressHandler);\n    }\n  }\n\n  render() {\n    /**\n     * Contrary to other component implementations, the `className` prop is destructured from the spread `props` object.\n     * This is to allow for it to only apply to the datepicker's container, which may be the label or the picker itself.\n     */\n    const _a = this.props,\n          onChange = _a.onChange,\n          placeholder = _a.placeholder,\n          start = _a.start,\n          end = _a.end,\n          label = _a.label,\n          min = _a.min,\n          max = _a.max,\n          className = _a.className,\n          props = __rest(_a, [\"onChange\", \"placeholder\", \"start\", \"end\", \"label\", \"min\", \"max\", \"className\"]);\n\n    const _this$state = this.state,\n          isExpanded = _this$state.isExpanded,\n          month = _this$state.month,\n          year = _this$state.year;\n    const domId = props.id || (label && label.toLowerCase ? label.toLowerCase().replace(/\\s/g, \"-\") : undefined);\n    const nextMonth = DatePicker_utils_1.changeMonth(1, {\n      month: this.state.month,\n      year: this.state.year\n    });\n    const canGoToPreviousMonth = !min || min < DatePicker_utils_1.toDate(this.state.year, this.state.month, 0);\n    const canGoToNextMonth = !max || max >= DatePicker_utils_1.toDate(nextMonth.year, nextMonth.month, 0);\n\n    const datePickerWithoutLabel = isStandalone => React.createElement(DatePicker_styles_1.Container, Object.assign({}, props, {\n      className: isStandalone ? className : undefined,\n      ref: node => {\n        this.containerNode = node;\n      },\n      isExpanded: isExpanded\n    }), !!(start && end) && React.createElement(DatePicker_styles_1.Toggle, {\n      onClick: ev => {\n        ev.preventDefault();\n\n        if (onChange) {\n          onChange({\n            start: undefined,\n            end: undefined\n          });\n        }\n      }\n    }, React.createElement(__1.Icon, {\n      name: \"No\",\n      size: 14\n    })), React.createElement(DatePicker_styles_1.Input, {\n      isExpanded: this.state.isExpanded,\n      id: domId,\n      readOnly: true,\n      ref: node => {\n        this.inputNode = node;\n      },\n      value: [start, end].filter(s => !!s).join(\" - \"),\n      placeholder: placeholder,\n      onClick: () => {\n        this.setState(prevState => ({\n          isExpanded: !prevState.isExpanded\n        }), () => {\n          if (!this.state.isExpanded) {\n            this.inputNode.blur();\n          }\n        });\n      }\n    }), React.createElement(DatePicker_styles_1.DatePickerCard, {\n      isExpanded: isExpanded\n    }, React.createElement(DatePicker_styles_1.MonthNav, null, React.createElement(DatePicker_styles_1.IconContainer, {\n      disabled: !canGoToPreviousMonth,\n      onClick: ev => {\n        ev.preventDefault();\n\n        if (!canGoToPreviousMonth) {\n          return;\n        }\n\n        this.changeMonth(-1);\n      }\n    }, React.createElement(__1.Icon, {\n      name: \"ChevronLeft\",\n      size: 12\n    })), React.createElement(\"span\", null, \"\".concat(DatePicker_utils_1.months[month], \", \").concat(year)), React.createElement(DatePicker_styles_1.IconContainer, {\n      disabled: !canGoToNextMonth,\n      onClick: ev => {\n        ev.preventDefault();\n\n        if (!canGoToNextMonth) {\n          return;\n        }\n\n        this.changeMonth(+1);\n      }\n    }, React.createElement(__1.Icon, {\n      name: \"ChevronRight\",\n      size: 12\n    }))), React.createElement(DatePicker_Month_1.default, {\n      start: start,\n      end: end,\n      min: min,\n      max: max,\n      year: year,\n      month: month,\n      onChange: onChange\n    })));\n\n    return label ? React.createElement(mixins_1.Label, Object.assign({}, props, {\n      className: className\n    }), React.createElement(LabelText_1.LabelText, null, label), datePickerWithoutLabel(false)) : datePickerWithoutLabel(true);\n  }\n\n}\n\nDatePicker.defaultProps = {\n  placeholder: \"Enter date\"\n};\nexports.default = DatePicker;","map":null,"metadata":{},"sourceType":"script"}