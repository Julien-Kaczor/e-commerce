{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/julien-pc/Bureau/PROJECT/e-commerce/front/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = __importStar(require(\"react\"));\n\nconst Icon_1 = __importDefault(require(\"../Icon/Icon\"));\n\nconst Spinner_1 = __importDefault(require(\"../Spinner/Spinner\"));\n\nconst styled_1 = __importDefault(require(\"../utils/styled\"));\n\nexports.tabsBarHeight = 40;\nconst TabsBar = styled_1.default(\"div\")(({\n  theme,\n  condensed\n}) => Object.assign({\n  display: \"flex\",\n  alignItems: \"flex-end\",\n  height: condensed ? theme.titleHeight : exports.tabsBarHeight,\n  color: \"inherit\"\n}, condensed ? {\n  paddingLeft: theme.space.element\n} : {}));\nconst Tab = styled_1.default(\"div\")(({\n  theme,\n  active\n}) => ({\n  display: \"flex\",\n  height: \"100%\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  color: \"currentColor\",\n  opacity: active ? 1 : 0.8,\n  textTransform: \"uppercase\",\n  fontFamily: theme.font.family.main,\n  fontSize: theme.font.size.small,\n  fontWeight: theme.font.weight.medium,\n  padding: \"0px \".concat(theme.space.element, \"px\"),\n  borderBottom: \"2px solid\",\n  borderBottomColor: active ? \"currentColor\" : \"transparent\",\n  \":hover\": {\n    cursor: \"pointer\",\n    opacity: 1\n  }\n}));\n\nconst getTabIndexByName = (tabs, tabName) => {\n  if (tabName) {\n    const index = tabs.findIndex(({\n      name\n    }) => name === tabName);\n    return index === -1 ? 0 : index;\n  }\n\n  return 0;\n};\n\nconst Tabs = ({\n  onTabChange,\n  tabs,\n  activeTabName,\n  condensed,\n  children\n}) => {\n  const activeTabIndex = getTabIndexByName(tabs, activeTabName);\n\n  const _react_1$useState = react_1.useState(activeTabIndex),\n        _react_1$useState2 = _slicedToArray(_react_1$useState, 2),\n        activeTab = _react_1$useState2[0],\n        setActiveTab = _react_1$useState2[1];\n\n  react_1.useEffect(() => {\n    setActiveTab(activeTabIndex);\n  }, [activeTabIndex]);\n  const onTabClick = react_1.useCallback(index => {\n    setActiveTab(index);\n\n    if (onTabChange) {\n      onTabChange(tabs[index].name);\n    }\n  }, [onTabChange, tabs, setActiveTab]); // Work around: wrap return in fragment- to prevent type error and not having to change childrens return type\n  // https://github.com/Microsoft/TypeScript/issues/21699\n\n  return react_1.default.createElement(react_1.default.Fragment, null, children({\n    tabsBar: react_1.default.createElement(TabsBar, {\n      condensed: condensed\n    }, tabs.filter(({\n      hidden\n    }) => !hidden).map((tab, index) => react_1.default.createElement(Tab, {\n      condensed: condensed,\n      key: index,\n      active: activeTab === index,\n      onClick: () => onTabClick(index)\n    }, tab.loading ? react_1.default.createElement(Spinner_1.default, {\n      left: true,\n      size: 14\n    }) : tab.icon && react_1.default.createElement(Icon_1.default, {\n      name: tab.icon,\n      size: 14,\n      color: tab.iconColor,\n      left: true\n    }), tab.name))),\n    activeChildren: tabs[activeTab].children\n  }));\n};\n\nexports.default = Tabs;","map":null,"metadata":{},"sourceType":"script"}