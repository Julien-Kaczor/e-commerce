{"ast":null,"code":"\"use strict\";\n\nvar _taggedTemplateLiteral = require(\"/home/julien-pc/Bureau/PROJECT/e-commerce/front/node_modules/@babel/runtime/helpers/taggedTemplateLiteral\");\n\nfunction _templateObject2() {\n  const data = _taggedTemplateLiteral([\"\\n  border-left: 3px solid \", \";\\n  padding-left: \", \"px;\\n  color: \", \";\\n\\n  :not(:last-child) {\\n    margin-bottom: \", \"px;\\n  }\\n\\n  div {\\n    color: \", \";\\n  }\\n\"]);\n\n  _templateObject2 = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  const data = _taggedTemplateLiteral([\"\\n  width: 6px;\\n  height: 6px;\\n  border-radius: 50%;\\n  background-color: currentColor;\\n  margin-right: \", \"px;\\n  margin-top: 6px;\\n  float: left;\\n\"]);\n\n  _templateObject = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst react_markdown_1 = __importDefault(require(\"react-markdown\"));\n\nconst Checkbox_1 = __importDefault(require(\"../Checkbox/Checkbox\"));\n\nconst Code_1 = __importDefault(require(\"../Code/Code\"));\n\nconst Table_1 = __importDefault(require(\"../Table/Table\"));\n\nconst Body_1 = __importDefault(require(\"../Typography/Body\"));\n\nconst Title_1 = __importDefault(require(\"../Typography/Title\"));\n\nconst styled_1 = __importDefault(require(\"../utils/styled\"));\n\nconst BulletPoint = styled_1.default(\"div\")(_templateObject(), ({\n  theme\n}) => theme.space.small);\nconst Blockquote = styled_1.default(\"div\")(_templateObject2(), ({\n  theme\n}) => theme.color.border.default, ({\n  theme\n}) => theme.space.content, ({\n  theme\n}) => theme.color.text.lighter, ({\n  theme\n}) => theme.space.big, ({\n  theme\n}) => theme.color.text.lighter);\n\nconst Markdown = ({\n  value: inputValue\n}) => {\n  /**\n   * react-markdown supports a concept of \"renderers\" that render\n   * specific JSX for a given piece of Markdown AST.\n   *\n   * This is the dictionary that maps bits of Markdown to our\n   * components.\n   */\n  const renderers = {\n    code: ({\n      value,\n      language\n    }) => React.createElement(Code_1.default, {\n      syntax: language\n    }, value),\n    heading: ({\n      children\n    }) => React.createElement(Title_1.default, null, children),\n    paragraph: ({\n      children\n    }) => React.createElement(Body_1.default, null, children),\n    listItem: ({\n      children,\n      checked\n    }) => React.createElement(Body_1.default, null, checked === null && React.createElement(React.Fragment, null, React.createElement(BulletPoint, null), \" \", children), typeof checked === \"boolean\" && React.createElement(Checkbox_1.default, {\n      value: checked,\n      label: children\n    })),\n    blockquote: ({\n      children\n    }) => React.createElement(Blockquote, null, children),\n\n    /**\n     * The structure of the table renderer in react-markdown\n     * may be a little concerning: it gives you a full set of Table components in the\n     * following shape:\n     *\n     * [\n     *  { ...tableHead },\n     *  { ...tableBody }\n     * ]\n     *\n     * The schemas of these objects are react components with a predictable shape.\n     * We've nailed down this version to be _exact_ in package.json so these will\n     * not change, but as far as I can see, there is no better way to render tables\n     * with this library.\n     *\n     * We looked at other libraries and also weren't able to find a clean-enough\n     * solution. :(\n     */\n    table: ({\n      children: [tableHead, tableBody]\n    }) => {\n      const columns = tableHead.props.children[0].props.children.map(columnNode => columnNode.props.children[0].props.value);\n      const data = tableBody.props.children.map(row => row.props.children.map(child => child.props.children).reduce((acc, child, index) => Object.assign({}, acc, {\n        [columns[index]]: child[0].props.value\n      }), {}));\n      return React.createElement(Table_1.default, {\n        columns: columns,\n        data: data\n      });\n    }\n  };\n  return React.createElement(react_markdown_1.default, {\n    renderers: renderers,\n    source: inputValue\n  });\n};\n\nexports.default = Markdown;","map":null,"metadata":{},"sourceType":"script"}