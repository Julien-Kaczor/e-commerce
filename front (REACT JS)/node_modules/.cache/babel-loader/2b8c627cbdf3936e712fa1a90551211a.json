{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/julien-pc/Bureau/PROJECT/e-commerce/front/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst noop_1 = __importDefault(require(\"lodash/noop\"));\n\nconst qs_1 = __importDefault(require(\"qs\"));\n\nconst react_1 = require(\"react\");\n\nconst isClient_1 = require(\"../utils/isClient\");\n/**\n * Bunch of method that depends on `window`\n *\n * This is mostly for testing purpose but can also be used for SSR.\n */\n\n\nconst options = isClient_1.isClient() ? {\n  getSearch: () => window.location.search,\n  getHash: () => window.location.hash,\n  getPathname: () => window.location.pathname,\n  replaceState: window.history.replaceState.bind(window.history)\n} : {\n  getSearch: noop_1.default,\n  getHash: noop_1.default,\n  getPathname: noop_1.default,\n  replaceState: noop_1.default\n};\n/**\n * Parse the search to object.\n *\n * @param search\n */\n\nconst getSearchParams = search => qs_1.default.parse(search.replace(\"?\", \"\")) || {};\n/**\n * Create a state that is sync with url search param.\n *\n * @param name Name of your state\n * @param decoder Validate and decode the value from the url\n * @param options `window` dependent methods\n */\n\n\nexports.useURLState = (name, initialValue, decoder = val => val, {\n  getHash,\n  getPathname,\n  replaceState,\n  getSearch\n} = options) => {\n  // Retrieve the value from the url search param\n  const searchValue = getSearchParams(getSearch() || \"\")[name]; // Check if the value is valid, regarding the validator\n\n  const encodedValue = decoder(searchValue); // Set the initial value\n\n  const _react_1$useState = react_1.useState(encodedValue !== undefined ? encodedValue : initialValue),\n        _react_1$useState2 = _slicedToArray(_react_1$useState, 2),\n        value = _react_1$useState2[0],\n        setValue = _react_1$useState2[1]; // Update the url search param on state update\n\n\n  react_1.useEffect(() => {\n    const params = getSearchParams(getSearch() || \"\");\n    params[name] = value;\n    const search = \"?\".concat(qs_1.default.stringify(params));\n    replaceState({}, \"\", \"\".concat(getPathname()).concat(search === \"?\" ? \"\" : search).concat(getHash()));\n  }, [value]);\n  return [value, setValue];\n};","map":null,"metadata":{},"sourceType":"script"}