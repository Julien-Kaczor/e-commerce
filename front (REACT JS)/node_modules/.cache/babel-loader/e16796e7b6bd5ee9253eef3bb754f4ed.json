{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst styled_1 = __importDefault(require(\"../utils/styled\"));\n\nconst Input_constants_1 = require(\"../Input/Input.constants\");\n\nconst LabelText_1 = require(\"../LabelText/LabelText\");\n\nconst utils_1 = require(\"../utils\");\n\nconst constants_1 = require(\"../utils/constants\");\n\nconst mixins_1 = require(\"../utils/mixins\");\n\nconst Select_Filter_1 = __importDefault(require(\"./Select.Filter\"));\n\nconst Select_Option_1 = __importDefault(require(\"./Select.Option\"));\n\nconst displayOption = opt => {\n  if (opt.label) {\n    return opt.label;\n  }\n\n  return String(opt.value);\n};\n\nconst Container = styled_1.default(\"div\")(({\n  theme,\n  color,\n  disabled,\n  naked\n}) => {\n  const backgroundColor = naked ? \"transparent\" : constants_1.expandColor(theme, color) || theme.color.white;\n  const dropdownArrowWidth = 56;\n  return {\n    backgroundColor,\n    label: \"select\",\n    position: \"relative\",\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"\".concat(theme.space.small, \"px \").concat(dropdownArrowWidth, \"px \").concat(theme.space.small, \"px \").concat(theme.space.content, \"px\"),\n    borderRadius: 4,\n    width: \"fit-content\",\n    minWidth: !naked ? 200 : \"none\",\n    minHeight: Input_constants_1.height,\n    border: naked ? 0 : \"1px solid\",\n    borderColor: theme.color.border.default,\n    opacity: disabled ? 0.5 : 1,\n    cursor: \"pointer\",\n    outline: \"none\",\n    pointerEvents: disabled ? \"none\" : \"all\",\n    // downward caret.\n    \"&::after\": {\n      content: \"''\",\n      position: \"absolute\",\n      top: \"50%\",\n      right: theme.space.content,\n      width: 0,\n      height: 0,\n      border: \"4px solid transparent\",\n      borderTopColor: theme.color.black,\n      transform: \"translateY(calc(-50%\".concat(naked ? \"\" : \" +2px\", \"))\")\n    },\n    \"&:focus\": !naked && mixins_1.inputFocus({\n      theme\n    })\n  };\n});\nconst DisplayValue = styled_1.default(\"div\")(({\n  theme,\n  isPlaceholder\n}) => {\n  if (isPlaceholder) {\n    return {\n      color: theme.color.text.lightest\n    };\n  }\n\n  return {\n    color: \"currentColor\"\n  };\n});\nconst Options = styled_1.default(\"div\")({\n  position: \"absolute\",\n\n  /**\n   * Push it down 6px so it doesn't overlap with the focus shadow,\n   * and there's a comfortable 2px gap.\n   */\n  top: \"calc(100% + 6px)\",\n  left: 0,\n  minWidth: \"100%\",\n  overflow: \"hidden\",\n  borderRadius: 4,\n  opacity: 0,\n  transform: \"translateY(-10px)\",\n  animation: \"\".concat(utils_1.floatIn, \" .15s forwards ease,\\n    \").concat(utils_1.resetTransform, \" .15s forwards ease\")\n}, ({\n  theme\n}) => ({\n  boxShadow: \"0 3px 12px rgba(0, 0, 0, .14)\",\n  zIndex: theme.zIndex.selectOptions\n}));\nconst OptionsList = styled_1.default(\"div\")({\n  maxHeight: 200,\n  overflow: \"auto\"\n});\n\nclass Select extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      open: false,\n      updating: false,\n      search: \"\"\n    }; // This implements \"click outside to close\" behavior\n\n    this.handleClick = ev => {\n      // if we're clicking on the Select itself,\n      if (this.containerNode && this.containerNode.contains(ev.target)) {\n        return;\n      } // if we're clicking outside,\n\n\n      this.close();\n    };\n\n    this.handleEsc = e => {\n      if (e.keyCode === utils_1.keyCodes.esc) {\n        this.close();\n      }\n    };\n  }\n\n  componentDidUpdate() {\n    if (this.state.open) {\n      document.addEventListener(\"click\", this.handleClick);\n      document.addEventListener(\"keyup\", this.handleEsc);\n    } else {\n      document.removeEventListener(\"click\", this.handleClick);\n      document.removeEventListener(\"keyup\", this.handleEsc);\n    }\n  }\n\n  getDisplayValue() {\n    const placeholder = this.props.placeholder;\n\n    if (!this.props.value) {\n      return placeholder;\n    }\n\n    if (!Array.isArray(this.props.value)) {\n      const displayedOption = this.props.options.filter(option => option.value === this.props.value)[0];\n      return displayedOption ? displayOption(displayedOption) : placeholder;\n    }\n\n    const listDisplay = this.props.options.map(option => this.props.value.indexOf(option.value) > -1 ? displayOption(option) : null).filter(a => !!a).join(\", \");\n    return listDisplay === \"\" ? this.props.placeholder || \"\" : listDisplay;\n  }\n\n  selectOption(option) {\n    const onChange = this.props.onChange;\n\n    if (!onChange) {\n      return;\n    }\n\n    if (!Array.isArray(this.props.value)) {\n      this.setState({\n        open: false\n      });\n      onChange(this.props.value === option.value ? null : option.value);\n      return;\n    }\n\n    const optionIndex = this.props.value.indexOf(option.value);\n\n    if (optionIndex < 0) {\n      onChange([...this.props.value, option.value], option.value);\n    } else {\n      onChange([...this.props.value.slice(0, optionIndex), ...this.props.value.slice(optionIndex + 1)], option.value);\n    }\n  }\n\n  isOptionSelected(option) {\n    if (!Array.isArray(this.props.value)) {\n      return this.props.value === option.value;\n    }\n\n    return this.props.value.indexOf(option.value) > -1;\n  }\n\n  close() {\n    this.setState(() => ({\n      open: false\n    }));\n  }\n\n  render() {\n    const _a = this.props,\n          color = _a.color,\n          disabled = _a.disabled,\n          naked = _a.naked,\n          value = _a.value,\n          options = _a.options,\n          filterable = _a.filterable,\n          label = _a.label,\n          onChange = _a.onChange,\n          maxOptions = _a.maxOptions,\n          props = __rest(_a, [\"color\", \"disabled\", \"naked\", \"value\", \"options\", \"filterable\", \"label\", \"onChange\", \"maxOptions\"]);\n\n    const _this$state = this.state,\n          open = _this$state.open,\n          search = _this$state.search;\n    const selectWithoutLabel = React.createElement(Container, Object.assign({}, props, {\n      color: color,\n      disabled: Boolean(disabled),\n      naked: Boolean(naked),\n      ref: containerNode => this.containerNode = containerNode,\n      role: \"listbox\",\n      tabIndex: -2,\n      onClick: () => {\n        this.setState(prevState => ({\n          open: !prevState.open\n        }));\n      }\n    }), React.createElement(DisplayValue, {\n      isPlaceholder: Array.isArray(value) ? value.length === 0 : !value\n    }, this.getDisplayValue()), Boolean(options.length) && open && React.createElement(Options, null, filterable && React.createElement(Select_Filter_1.default, {\n      onChange: filterValue => {\n        this.setState({\n          search: filterValue\n        });\n      }\n    }), React.createElement(OptionsList, null, options.filter(option => (option.label || String(option.value)).match(RegExp(search, \"i\"))).map(option => React.createElement(Select_Option_1.default, {\n      key: String(option.value),\n      onClick: () => {\n        this.selectOption(option);\n      },\n      selected: this.isOptionSelected(option)\n    }, option.label || String(option.value))).slice(0, maxOptions))));\n    return label ? React.createElement(mixins_1.Label, Object.assign({}, props), React.createElement(LabelText_1.LabelText, null, label), selectWithoutLabel) : selectWithoutLabel;\n  }\n\n}\n\nSelect.defaultProps = {\n  placeholder: \"No entries selected\",\n  naked: false\n};\nexports.default = Select;","map":null,"metadata":{},"sourceType":"script"}