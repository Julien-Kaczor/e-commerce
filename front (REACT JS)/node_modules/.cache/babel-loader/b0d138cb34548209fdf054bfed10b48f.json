{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst styled_1 = __importDefault(require(\"../utils/styled\"));\n\nconst getGridCSSProperties = gridType => {\n  if (gridType === \"IDE\") {\n    return {\n      gridTemplateColumns: \"200px auto\",\n      gridTemplateRows: \"auto\"\n    };\n  } // Handle NxM case\n\n\n  const gridNumbers = String(gridType).split(\"x\");\n  const cols = Number(gridNumbers[0]);\n  const rows = Number(gridNumbers[1]);\n\n  if (!isNaN(cols) && !isNaN(rows)) {\n    return {\n      gridTemplateColumns: \"repeat(\".concat(cols, \", 1fr)\"),\n      gridTemplateRows: \"repeat(\".concat(rows, \", 1fr)\")\n    };\n  }\n\n  throw new Error(\"Grid type can be either 'IDE' or of an `MxN` format, e.g. `1x2` or `5x6`. See https://ui.contiamo.com/components/grids/.\");\n};\n\nconst Container = styled_1.default(\"div\")(({\n  theme,\n  gridType\n}) => Object.assign({\n  label: \"Grid\",\n  width: \"100%\",\n  height: \"100%\",\n  display: \"grid\",\n  alignItems: \"flex-start\",\n  padding: theme.space.content,\n  gridColumnGap: theme.space.element,\n  gridRowGap: theme.space.element\n}, getGridCSSProperties(gridType)));\n\nconst Grid = _a => {\n  var type = _a.type,\n      props = __rest(_a, [\"type\"]);\n\n  return React.createElement(Container, Object.assign({}, props, {\n    gridType: type\n  }), props.children);\n};\n\nGrid.defaultProps = {\n  type: \"3x2\"\n};\nexports.default = Grid;","map":null,"metadata":{},"sourceType":"script"}