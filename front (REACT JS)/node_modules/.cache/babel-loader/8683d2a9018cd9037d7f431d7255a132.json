{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/julien-pc/Bureau/PROJECT/e-commerce/front/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst Foldable_Toggler_1 = __importDefault(require(\"./Foldable.Toggler\"));\n\nconst Foldable = ({\n  initialState = \"open\",\n  children\n}) => {\n  const togglerRef = React.useRef(null);\n\n  const _React$useState = React.useState(initialState === \"closed\"),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        isParentFolded = _React$useState2[0],\n        setIsFolded = _React$useState2[1];\n\n  const _React$useState3 = React.useState(false),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        isTogglerHovered = _React$useState4[0],\n        setIsTogglerHovered = _React$useState4[1];\n\n  React.useEffect(() => {\n    const handleMouseMove = e => {\n      if (togglerRef.current === null) {\n        return;\n      }\n\n      if (isTogglerHovered && !e.path.map(el => el.className).includes(togglerRef.current.className)) {\n        setIsTogglerHovered(false);\n      }\n    };\n\n    document.addEventListener(\"mousemove\", handleMouseMove);\n    return () => document.removeEventListener(\"mousemove\", handleMouseMove);\n  }, [isTogglerHovered]);\n  return children({\n    Toggler: ({\n      onClick,\n      isFolded\n    }) => React.createElement(Foldable_Toggler_1.default, {\n      onMouseEnter: e => {\n        e.stopPropagation();\n        setIsTogglerHovered(true);\n      },\n      onMouseLeave: e => {\n        e.stopPropagation();\n        setIsTogglerHovered(false);\n      },\n      isHovered: isTogglerHovered,\n      isFolded: typeof isFolded === \"undefined\" ? isParentFolded : Boolean(isFolded),\n      onClick: onClick || (() => setIsFolded(prevState => !prevState))\n    }),\n    isFolded: isParentFolded\n  });\n};\n\nexports.default = Foldable;","map":null,"metadata":{},"sourceType":"script"}