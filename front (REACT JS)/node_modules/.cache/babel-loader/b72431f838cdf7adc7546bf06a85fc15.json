{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst Button_1 = __importDefault(require(\"../Button/Button\"));\n\nconst Icon_1 = __importDefault(require(\"../Icon/Icon\"));\n\nconst styled_1 = __importDefault(require(\"../utils/styled\"));\n\nconst PaginatorSpan = styled_1.default(\"div\")(({\n  theme\n}) => ({\n  fontFamily: theme.font.family.main,\n  fontSize: theme.font.size.small,\n  padding: \"0 \".concat(theme.space.content, \"px\"),\n  display: \"inline-flex\",\n  color: theme.color.text.lighter,\n  minWidth: 120,\n  justifyContent: \"center\",\n  \"& span\": {\n    color: theme.color.text.dark,\n    paddingRight: 3\n  }\n}));\nconst NavigationButton = styled_1.default(Button_1.default)(({\n  type\n}) => ({\n  width: type === \"next\" || type === \"previous\" ? 70 : 56,\n  marginRight: 3,\n  padding: 0,\n  \"& svg\": {\n    verticalAlign: \"middle\",\n    marginTop: 1\n  },\n  \"& span\": {\n    padding: \"0 3px\"\n  }\n}));\n\nconst PaginatorControl = ({\n  children,\n  itemCount,\n  itemsPerPage,\n  page,\n  onChange,\n  type,\n  isDisabled\n}) => {\n  const pageChanges = {\n    first: 1,\n    previous: page - 1,\n    next: page + 1,\n    last: Math.ceil(itemCount / itemsPerPage)\n  };\n\n  const clickHandler = () => {\n    if (onChange) {\n      onChange(pageChanges[type]);\n    }\n  };\n\n  return React.createElement(NavigationButton, {\n    type: type,\n    disabled: isDisabled,\n    condensed: true,\n    onClick: clickHandler\n  }, children);\n};\n\nconst getRange = ({\n  page,\n  itemCount,\n  itemsPerPage\n}) => {\n  const start = 1 + (page - 1) * itemsPerPage;\n  const end = Math.min(itemCount, page * itemsPerPage);\n  return \"\".concat(start, \"-\").concat(end);\n};\n\nconst Container = styled_1.default(\"div\")(({\n  theme\n}) => ({\n  label: \"paginator\",\n  marginTop: theme.space.element,\n  display: \"flex\",\n  alignItems: \"center\"\n}));\n\nconst Paginator = _a => {\n  var itemCount = _a.itemCount,\n      itemsPerPage = _a.itemsPerPage,\n      page = _a.page,\n      onChange = _a.onChange,\n      props = __rest(_a, [\"itemCount\", \"itemsPerPage\", \"page\", \"onChange\"]);\n\n  const controlProps = {\n    itemCount,\n    itemsPerPage,\n    page,\n    onChange\n  };\n  const isFirstDisabled = page === 1;\n  const isLastDisabled = itemsPerPage * page >= itemCount;\n  return React.createElement(Container, Object.assign({}, props), React.createElement(PaginatorControl, Object.assign({\n    type: \"first\"\n  }, controlProps, {\n    isDisabled: isFirstDisabled\n  }), \"first\"), React.createElement(PaginatorControl, Object.assign({\n    type: \"previous\"\n  }, controlProps, {\n    isDisabled: isFirstDisabled\n  }), React.createElement(Icon_1.default, {\n    name: \"ChevronLeft\",\n    size: 11\n  }), React.createElement(\"span\", null, \"prev\")), React.createElement(PaginatorSpan, {\n    key: page\n  }, React.createElement(\"span\", null, getRange({\n    page,\n    itemCount,\n    itemsPerPage\n  })), \" of \", itemCount), React.createElement(PaginatorControl, Object.assign({\n    type: \"next\"\n  }, controlProps, {\n    isDisabled: isLastDisabled\n  }), React.createElement(\"span\", null, \"next\"), React.createElement(Icon_1.default, {\n    name: \"ChevronRight\",\n    size: 11\n  })), React.createElement(PaginatorControl, Object.assign({\n    type: \"last\"\n  }, controlProps, {\n    isDisabled: isLastDisabled\n  }), \"last\"));\n};\n\nexports.default = Paginator;","map":null,"metadata":{},"sourceType":"script"}