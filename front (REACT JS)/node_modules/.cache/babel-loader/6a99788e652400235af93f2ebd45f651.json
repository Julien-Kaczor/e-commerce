{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst lodash_1 = require(\"lodash\");\n\nconst React = __importStar(require(\"react\"));\n\nconst styled_1 = __importDefault(require(\"../utils/styled\"));\n\nconst utils_1 = require(\"../utils\");\n\nconst ContextMenu_Item_1 = __importDefault(require(\"./ContextMenu.Item\"));\n\nconst Container = styled_1.default(\"div\")(({\n  isOpen,\n  theme,\n  align\n}) => ({\n  label: \"contextmenu\",\n  cursor: \"pointer\",\n  position: \"relative\",\n  width: \"fit-content\",\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: align === \"left\" ? \"flex-start\" : \"flex-end\",\n  zIndex: isOpen ? theme.zIndex.selectOptions + 1 : theme.zIndex.selectOptions\n}));\nconst MenuContainer = styled_1.default(\"div\")(({\n  theme,\n  align,\n  embedChildrenInMenu\n}) => ({\n  position: \"absolute\",\n  top: embedChildrenInMenu ? 0 : \"100%\",\n  left: align === \"left\" ? 0 : \"auto\",\n  maxHeight: 360,\n  overflow: \"auto\",\n  boxShadow: theme.shadows.popup,\n  width: \"calc(100% - \".concat(theme.space.small, \"px)\"),\n  minWidth: \"fit-content\"\n}));\n/**\n * Overlay to prevent mouse events when the context menu is open\n */\n\nconst InvisibleOverlay = styled_1.default(\"div\")(({\n  theme\n}) => ({\n  position: \"fixed\",\n  top: 0,\n  bottom: 0,\n  right: 0,\n  left: 0,\n  cursor: \"default\",\n  zIndex: theme.zIndex.selectOptions + 1\n}));\n\nclass ContextMenu extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.menu = null;\n\n    this.toggle = e => {\n      e.stopPropagation();\n      this.setState(prevState => ({\n        isOpen: !prevState.isOpen\n      }));\n    };\n\n    this.focusElement = () => {\n      if (this.menu && this.menu.querySelector('[tabindex=\"0\"]')) {\n        setTimeout(() => this.menu.querySelector('[tabindex=\"0\"]').focus());\n      }\n    };\n\n    this.onUpPress = () => ({\n      focusedItemIndex: this.state.focusedItemIndex === 0 ? this.props.items.length - 1 : this.state.focusedItemIndex - 1\n    });\n\n    this.onDownPress = () => ({\n      focusedItemIndex: this.state.focusedItemIndex === this.props.items.length - 1 ? 0 : this.state.focusedItemIndex + 1\n    });\n\n    this.handleKeyPress = ({\n      keyCode\n    }) => {\n      if (keyCode === utils_1.keyCodes.enter && this.props.onClick) {\n        this.props.onClick(this.makeItem(this.props.items[this.state.focusedItemIndex]));\n        this.setState(() => ({\n          isOpen: false\n        }));\n        return;\n      }\n\n      if (keyCode === utils_1.keyCodes.esc) {\n        this.setState(() => ({\n          isOpen: false\n        }));\n        return;\n      }\n\n      if ([utils_1.keyCodes.up, utils_1.keyCodes.down].includes(keyCode)) {\n        this.setState(keyCode === utils_1.keyCodes.up ? this.onUpPress : this.onDownPress);\n        this.focusElement();\n      }\n    };\n    /**\n     * Preserve the public API: if users submit strings in props.items,\n     * convert them into actual ContextMenuItems.\n     */\n\n\n    this.makeItem = itemFromProps => typeof itemFromProps === \"string\" ? {\n      label: itemFromProps\n    } : itemFromProps;\n\n    this.state = {\n      isOpen: false,\n      focusedItemIndex: 0\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // Reset focused item to first if items change.\n    if (!lodash_1.isEqual(this.props.items, prevProps.items)) {\n      this.setState(() => ({\n        focusedItemIndex: this.props.items.length - 1\n      }));\n    }\n  }\n\n  render() {\n    if (!this.props.items) {\n      throw new Error(\"No array of items has been provided for the ContextMenu.\");\n    }\n\n    const _a = this.props,\n          condensed = _a.condensed,\n          iconLocation = _a.iconLocation,\n          children = _a.children,\n          open = _a.open,\n          embedChildrenInMenu = _a.embedChildrenInMenu,\n          align = _a.align,\n          width = _a.width,\n          props = __rest(_a, [\"condensed\", \"iconLocation\", \"children\", \"open\", \"embedChildrenInMenu\", \"align\", \"width\"]);\n\n    const isOpen = open || this.state.isOpen;\n    const renderedChildren = typeof children === \"function\" ? children(this.state.isOpen) : children;\n    return React.createElement(React.Fragment, null, isOpen && React.createElement(InvisibleOverlay, {\n      onClick: this.toggle\n    }), React.createElement(Container, Object.assign({\n      isOpen: isOpen\n    }, props, {\n      align: align,\n      onClick: this.toggle,\n      onKeyUp: this.handleKeyPress\n    }), renderedChildren, isOpen && React.createElement(MenuContainer, {\n      align: this.props.align,\n      ref: node => this.menu = node,\n      embedChildrenInMenu: this.props.embedChildrenInMenu\n    }, embedChildrenInMenu && renderedChildren, props.items.map((itemFromProps, index) => {\n      const item = this.makeItem(itemFromProps);\n      const clickHandler = item.onClick ? item.onClick : this.props.onClick;\n      return React.createElement(ContextMenu_Item_1.default, {\n        tabIndex: this.state.focusedItemIndex === index ? 0 : -1,\n        onClick: clickHandler && (() => clickHandler(item)),\n        key: \"contextmenu-\".concat(index),\n        condensed: condensed,\n        align: align,\n        iconLocation: iconLocation,\n        width: width || \"100%\",\n        item: item\n      });\n    }))));\n  }\n\n}\n\nContextMenu.defaultProps = {\n  align: \"left\",\n  embedChildrenInMenu: false\n};\nexports.default = ContextMenu;","map":null,"metadata":{},"sourceType":"script"}