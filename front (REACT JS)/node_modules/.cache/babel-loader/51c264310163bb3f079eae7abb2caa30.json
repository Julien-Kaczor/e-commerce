{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/julien-pc/Bureau/PROJECT/e-commerce/front/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst react_1 = __importStar(require(\"react\"));\n\nconst useInterval_1 = __importDefault(require(\"../useInterval\"));\n\nconst styled_1 = __importDefault(require(\"../utils/styled\")); // Number of squares in the animation grid\n\n\nconst squares = 16; // Number of animating boxes\n\nconst boxes = 50; // Return integer random between 0 and range - 1, boundaries included\n\nconst integerRandom = range => {\n  return Math.floor(Math.random() * range);\n}; // If a coordinate falls out of the (0, n - 1) range,\n// bounce it back into the animation frame.\n\n\nconst bounce = coord => {\n  if (coord < 0) {\n    return -coord;\n  }\n\n  if (coord > squares - 1) {\n    return 2 * (squares - 1) - coord;\n  }\n\n  return coord;\n}; // css Hack so we dont need to worry about max(window.height,window.width)- Only needed when fullscreen is enabled\n// https://spin.atomicobject.com/2015/07/14/css-responsive-square/\n\n\nconst FullScreenWrap = styled_1.default(\"div\")({\n  position: \"absolute\",\n  width: \"100%\",\n  \":after\": {\n    content: \"''\",\n    display: \"block\",\n    paddingBottom: \"100%\"\n  }\n});\nconst Container = styled_1.default(\"div\")({\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate3d(-50%, -50%, 0)\",\n  width: \"100%\",\n  height: \"100%\"\n}); /// Move highly highly dynamic style out of css-js to prevent uneeded classname generation\n\nconst Box = styled_1.default(\"div\")({\n  position: \"absolute\",\n  transition: \"all 0.5s ease-in-out\",\n  borderRadius: 6,\n  width: \"calc(\".concat(100 / (squares - 1), \"% - 8px)\"),\n  height: \"calc(\".concat(100 / (squares - 1), \"% - 8px)\"),\n  backgroundColor: \"rgba(255, 255, 255, 0.06)\"\n});\nconst initialState = {\n  animationStep: 0,\n  coordinates: Array.from(Array(boxes), (_, index) => index).map(() => ({\n    x: integerRandom(squares),\n    y: integerRandom(squares)\n  }))\n};\n\nconst Animation = ({\n  isFullscreen,\n  size = 600\n}) => {\n  const _react_1$useState = react_1.useState(initialState),\n        _react_1$useState2 = _slicedToArray(_react_1$useState, 2),\n        state = _react_1$useState2[0],\n        updateAnimation = _react_1$useState2[1];\n\n  useInterval_1.default(() => {\n    updateAnimation({\n      animationStep: state.animationStep + 1,\n      coordinates: state.coordinates.map((coord, index) => {\n        if (index % 3 === state.animationStep % 3) {\n          const dx = integerRandom(3) - 1;\n          const dy = integerRandom(3) - 1;\n          return {\n            x: bounce(coord.x + dx),\n            y: bounce(coord.y - dy)\n          };\n        }\n\n        return coord;\n      })\n    });\n  }, 5000, true);\n  const children = state.coordinates.map((coord, index) => react_1.default.createElement(Box, {\n    key: index,\n    style: {\n      top: \"\".concat(coord.x / (squares - 1) * 100, \"%\"),\n      left: \"\".concat(coord.y / (squares - 1) * 100, \"%\")\n    }\n  })); // Only will change if isFullscreen or size changes, a workaround from not having to set outer container width and height to max(window.height, window.width)\n\n  return isFullscreen ? react_1.default.createElement(FullScreenWrap, null, react_1.default.createElement(Container, null, children)) : react_1.default.createElement(Container, {\n    style: {\n      width: size,\n      height: size\n    }\n  }, children);\n};\n\nexports.default = Animation;","map":null,"metadata":{},"sourceType":"script"}