{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst get_1 = __importDefault(require(\"lodash/get\"));\n/**\n * # Operational UI's styling constants.\n *\n * Operational UI is a provider of _opinionated_ building blocks for\n * data-driven user interfaces. Below are centralized _opinions_\n * that we've made that allow for the creation and styling of such\n * building blocks.\n *\n * The opinions are divided into:\n * - Colors\n * - Typography\n * - Space\n *\n * and are used widely throughout the library.\n */\n\n/**\n * Operational UI uses a selection of greys\n * to achieve subtle, yet effective shading\n * effects and readable typography.\n */\n// These constants are shared across many object definitions.\n\n\nconst primaryColor = \"#1499cc\";\nconst whiteColor = \"#fff\";\n/**\n * A specialized color palette for backgrounds.\n */\n\nconst backgroundColors = {\n  /** `#2a2e37` */\n  dark: \"#2a2e37\",\n\n  /** `#999` */\n  mediumDark: \"#999\",\n\n  /** `#ececec` */\n  light: \"#ececec\",\n\n  /** `#f2f4f6` */\n  lighter: \"#f2f4f6\",\n\n  /** `#f8f8f8` */\n  lightest: \"#f8f8f8\",\n\n  /** `#fcfcfc` */\n  almostWhite: \"#fcfcfc\"\n};\n/**\n * A specialized color palette for separators.\n */\n\nconst separatorColors = {\n  /** `#768f9e` */\n  dark: \"#768f9e\",\n\n  /** `#bfcbd2` */\n  default: \"#bfcbd2\",\n\n  /** `#d7dfe3` */\n  light: \"#d7dfe3\"\n};\n/**\n * A specialized color palette for typography.\n */\n\nconst textColors = {\n  /** `#333` */\n  dark: \"#333\",\n\n  /** `#545454` */\n  default: \"#545454\",\n\n  /** `#c0c0c0` */\n  disabled: \"#c0c0c0\",\n\n  /** `#666` */\n  light: \"#666\",\n\n  /** `#747474` */\n  lighter: \"#747474\",\n\n  /** `#909090` */\n  lightest: \"#909090\",\n\n  /** primary color */\n  action: primaryColor,\n  white: whiteColor\n};\n/**\n * A specialized color palette for borders.\n */\n\nconst borderColors = {\n  /** `#c0c0c0` */\n  default: \"#c0c0c0\",\n\n  /** `#d8d8d8` */\n  disabled: \"#d8d8d8\",\n\n  /** `#eee` */\n  invisible: \"#eee\",\n\n  /** `#eee` */\n  medium: \"#e5e5e5\",\n\n  /** `#f3f3f3` */\n  lightest: \"#f3f3f3\"\n};\n/**\n * A collection of colors used throughout the library.\n * We've chosen HEX syntax for color descriptions to ensure consistency\n * with design colors.\n *\n * hsla is used where alpha blending is involved.\n */\n\nconst color = {\n  primary: primaryColor,\n\n  /** `#f5f5f5` */\n  disabled: \"#f5f5f5\",\n\n  /** `#ffbd41` */\n  warning: \"#ffbd41\",\n\n  /** `#0c991d` */\n  success: \"#0c991d\",\n\n  /** `#9a0000` */\n  error: \"#9a0000\",\n\n  /** `#636363` */\n  basic: \"#636363\",\n  ghost: \"hsla(0, 0%, 100%, 0.33)\",\n  white: whiteColor,\n\n  /** `#fff26666` */\n  highlight: \"#fff26666\",\n\n  /** `#000` */\n  black: \"#000\",\n  background: backgroundColors,\n  separators: separatorColors,\n  text: textColors,\n  border: borderColors,\n  palette: [\"#1499CE\", \"#7C246F\", \"#EAD63F\", \"#343972\", \"#ED5B17\", \"#009691\", \"#1D6199\", \"#D31F1F\", \"#AD329C\", \"#006865\"]\n};\n/**\n * Font definitions and sizes available for use\n * throughout Operational UI.\n */\n\nconst font = {\n  family: {\n    main: \"\\\"Helvetica Neue\\\", Helvetica, Arial, \\\"Lucida Grande\\\", sans-serif\",\n    code: \"Menlo, monospace\"\n  },\n\n  /** 1.4 */\n  lineHeight: 1.4,\n  size: {\n    /** 16px */\n    title: 16,\n\n    /** 14px */\n    body: 14,\n\n    /** 13px */\n    small: 13,\n\n    /** 12px */\n    fineprint: 12,\n\n    /** 11px */\n    tiny: 11\n  },\n  weight: {\n    /** 400 */\n    regular: 400,\n\n    /** 500 */\n    medium: 500,\n\n    /** 600 */\n    bold: 600\n  }\n};\n/**\n * A container of space-related constants to be\n * used throughout Operational UI.\n */\n\nexports.space = {\n  /** Base space is `4px` */\n  base: 4,\n\n  /** Small space is `8px` */\n  small: 8,\n\n  /** Medium space is `12px` */\n  medium: 12,\n\n  /** Content space is `16px` */\n  content: 16,\n\n  /** Element space is `20px` */\n  element: 20,\n\n  /** Big space is `28px` */\n  big: 28\n};\n/**\n * One zIndex to rule them all\n */\n\nconst zIndex = {\n  /** `0` */\n  default: 0,\n\n  /** `300` */\n  selectOptions: 300,\n\n  /** `299` */\n  formFieldError: 299,\n\n  /** `400` */\n  tooltip: 400,\n\n  /** `500` */\n  modal: 500,\n\n  /** `600` */\n  confirm: 600,\n\n  /** `1000` */\n  debugViewer: 1000,\n\n  /** `299` */\n  globalProgress: 299,\n\n  /** `2000` */\n  messages: 2000,\n\n  /** `100` */\n  switch: 100\n};\n/**\n * Shadows to apply to elements\n */\n\nconst shadows = {\n  pressed: \"inset 0 1px 1px rgba(0,0,0,0.15)\",\n  topBar: \"0px 1px 5px #d3d1d1\",\n  focus: \"inset 0 1px 1px rgba(0,0,0,.075), 0 0 8px rgba(82,168,236,.6)\",\n  insetFocus: \"inset 0 0 0px 2px #1499ce\",\n  popup: \"0 3px 12px rgba(0, 0, 0, .15)\",\n  card: \"0 1px 3px 0 rgba(191, 203, 210, 0.9)\"\n};\nconst constants = {\n  font,\n  space: exports.space,\n  zIndex,\n  color,\n  shadows,\n  borderRadius: 2,\n  compactSidebarWidth: 90,\n  sidebarWidth: 220,\n  topbarHeight: 42,\n  titleHeight: 50\n};\n/*\n * Expands a color expressed either as a custom hex value\n * or a color key to pick from within the style constants object.\n */\n\nexports.expandColor = (theme, colorToBeExpanded) => {\n  if (!colorToBeExpanded) {\n    return null;\n  }\n\n  if (String(colorToBeExpanded).includes(\".\")) {\n    return get_1.default(theme, colorToBeExpanded, \"red\");\n  }\n\n  const hexRegEx = /(^#[0-9A-F]{6}$)|(^#[0-9A-F]{8}$)|(^#[0-9A-F]{4}$)|(^#[0-9A-F]{3}$)|currentColor/i;\n  const isHex = hexRegEx.test(colorToBeExpanded);\n\n  if (isHex) {\n    return colorToBeExpanded;\n  }\n  /**\n   * This function is typically used in checks.\n   * If falsy, it returns a fallback color, hence\n   * the empty string return for a falsy value.\n   */\n\n\n  return theme.color[colorToBeExpanded] || \"\";\n};\n\nexports.default = constants;","map":null,"metadata":{},"sourceType":"script"}