{"ast":null,"code":"\"use strict\";\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst core_1 = require(\"@emotion/core\");\n\nconst React = __importStar(require(\"react\"));\n\nconst constants_1 = require(\"../utils/constants\");\n\nconst styled_1 = __importDefault(require(\"../utils/styled\"));\n\nconst spinKeyframes = core_1.keyframes({\n  \"0%\": {\n    transform: \"rotate(0deg)\"\n  },\n  \"100%\": {\n    transform: \"rotate(360deg)\"\n  }\n});\nconst bounceKeyframes = core_1.keyframes({\n  \"0%\": {\n    transform: \"translate3d(0, 0, 0)\"\n  },\n  \"30%\": {\n    transform: \"translate3d(0, -4px, 0)\"\n  },\n  \"60%\": {\n    transform: \"translate3d(0, 0, 0)\"\n  },\n  \"100%\": {\n    transform: \"translate3d(0, 0, 0)\"\n  }\n});\nconst defaultSize = 18;\nconst Container = styled_1.default(\"div\")(({\n  size,\n  color,\n  theme,\n  left,\n  right\n}) => ({\n  display: \"inline-block\",\n  width: size || defaultSize,\n  height: size || defaultSize,\n  marginRight: left ? theme.space.small : 0,\n  marginLeft: right ? theme.space.small : 0,\n  \"& svg\": {\n    fill: constants_1.expandColor(theme, color) || \"currentColor\"\n  }\n}));\n/**\n * This additional container is introduced to make transforms set on the main container from the outside\n * (e.g. `styled` helper) do not mess up the rotation origin.\n */\n\nconst AnimationContainer = styled_1.default(\"div\")(({\n  bounce,\n  size\n}) => ({\n  margin: 0,\n  lineHeight: 0,\n  width: size || defaultSize,\n  height: size || defaultSize,\n  transformOrigin: \"center center\",\n\n  /*\n   * When the bounce animation is used, animation properties are set on the individual bouncing squares,\n   * therefore no animation is set on the container.\n   */\n  animation: bounce ? \"none\" : \"\".concat(spinKeyframes, \" 1.5s infinite linear\")\n}));\n\nconst RegularSpinner = _ => React.createElement(\"svg\", {\n  viewBox: \"0 0 360 360\"\n}, React.createElement(\"path\", {\n  d: \"M160,0 L160,100 L200,100 L200,0Z\"\n}), React.createElement(\"path\", {\n  d: \"M321.396,67.075l-70.697,70.697l-28.284,-28.284l70.697,-70.697c9.428,9.428 18.856,18.856 28.284,28.284Z\"\n}), React.createElement(\"path\", {\n  d: \"M260,160 L360,160 L360,200 L260,200Z\"\n}), React.createElement(\"path\", {\n  d: \"M321.853,292.842l-28.285,28.284l-69.71,-69.711l28.284,-28.284c23.237,23.237 46.474,46.474 69.711,69.711Z\"\n}), React.createElement(\"path\", {\n  d: \"M160,260 L160,360 L200,360 L200,260Z\"\n}), React.createElement(\"path\", {\n  d: \"M136.142,251.415l-69.71,69.711l-28.285,-28.284l69.711,-69.711c9.428,9.428 18.856,18.856 28.284,28.284Z\"\n}), React.createElement(\"path\", {\n  d: \"M0,160 L100,160 L100,200 L0,200Z\"\n}), React.createElement(\"path\", {\n  d: \"M137.592,109.495l-28.299,28.269l-70.659,-70.734l28.3,-28.269c23.553,23.578 47.105,47.156 70.658,70.734Z\"\n}));\n\nconst BouncingSpinnerContainer = styled_1.default(\"div\")({\n  width: \"100%\",\n  height: \"100%\",\n  position: \"relative\"\n});\n/**\n * The bouncing spinner is constructed out of 3 80x80 boxes spaced out horizontally on a 360x360 grid\n * (these units don't refer to pixels, they simply mimic the grid of the icons.\n * The math used in here lays these boxes out so they're vertically centered and spaced\n * equally on the horizontal axis without any gutter.\n */\n\nconst BouncingSpinnerBox = styled_1.default(\"div\")(({\n  no,\n  theme,\n  color\n}) => ({\n  width: \"\".concat(80 / 360 * 100, \"%\"),\n  height: \"\".concat(80 / 360 * 100, \"%\"),\n  position: \"absolute\",\n  top: \"\".concat(140 / 360 * 100, \"%\"),\n  left: \"\".concat(no * 140 / 360 * 100, \"%\"),\n  backgroundColor: constants_1.expandColor(theme, color) || theme.color.text.lighter,\n  animation: \"\".concat(bounceKeyframes, \" 1s infinite ease-in-out\"),\n\n  /*\n   * Achieve the wave effect through incremental animation delays on the individual elements.\n   */\n  animationDelay: \"\".concat(no * 0.16, \"s\")\n}));\n\nconst BouncingSpinner = props => React.createElement(BouncingSpinnerContainer, null, React.createElement(BouncingSpinnerBox, {\n  color: props.color,\n  no: 0\n}), React.createElement(BouncingSpinnerBox, {\n  color: props.color,\n  no: 1\n}), React.createElement(BouncingSpinnerBox, {\n  color: props.color,\n  no: 2\n}));\n\nconst Spinner = props => React.createElement(Container, Object.assign({}, props), React.createElement(AnimationContainer, {\n  bounce: props.bounce,\n  size: props.size\n}, props.bounce ? React.createElement(BouncingSpinner, {\n  color: props.color\n}) : React.createElement(RegularSpinner, {\n  color: props.color\n})));\n\nexports.default = Spinner;","map":null,"metadata":{},"sourceType":"script"}