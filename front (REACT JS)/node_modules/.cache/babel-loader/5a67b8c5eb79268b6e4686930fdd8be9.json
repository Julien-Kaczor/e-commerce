{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/julien-pc/Bureau/PROJECT/e-commerce/front/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\n  result[\"default\"] = mod;\n  return result;\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst React = __importStar(require(\"react\"));\n\nconst Tree_1 = __importDefault(require(\"./Tree\"));\n\nconst TreeItem_1 = __importStar(require(\"./TreeItem\"));\n\nconst ChildTree = _a => {\n  var initiallyOpen = _a.initiallyOpen,\n      highlight = _a.highlight,\n      tag = _a.tag,\n      label = _a.label,\n      color = _a.color,\n      disabled = _a.disabled,\n      forwardRef = _a.forwardRef,\n      _a$childNodes = _a.childNodes,\n      childNodes = _a$childNodes === void 0 ? [] : _a$childNodes,\n      droppableProps = _a.droppableProps,\n      onClick = _a.onClick,\n      onRemove = _a.onRemove,\n      cursor = _a.cursor,\n      props = __rest(_a, [\"initiallyOpen\", \"highlight\", \"tag\", \"label\", \"color\", \"disabled\", \"forwardRef\", \"childNodes\", \"droppableProps\", \"onClick\", \"onRemove\", \"cursor\"]);\n\n  const _React$useState = React.useState(Boolean(initiallyOpen)),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        isOpen = _React$useState2[0],\n        setIsOpen = _React$useState2[1];\n\n  const hasChildren = Boolean(childNodes && childNodes.length);\n  const onNodeClick = !disabled && (hasChildren || onClick) ? e => {\n    e.stopPropagation();\n\n    if (hasChildren) {\n      setIsOpen(!isOpen);\n    }\n\n    if (onClick) {\n      onClick();\n    }\n  } : undefined;\n  return React.createElement(TreeItem_1.Container, Object.assign({\n    ref: forwardRef,\n    disabled: Boolean(disabled),\n    hasChildren: hasChildren\n  }, props), React.createElement(TreeItem_1.default, {\n    onNodeClick: onNodeClick,\n    highlight: Boolean(highlight),\n    hasChildren: hasChildren,\n    isOpen: isOpen,\n    tag: tag,\n    label: label,\n    color: color,\n    onRemove: onRemove,\n    cursor: cursor\n  }), hasChildren && isOpen && React.createElement(Tree_1.default, {\n    trees: childNodes,\n    droppableProps: droppableProps\n  }));\n};\n\nexports.default = ChildTree;","map":null,"metadata":{},"sourceType":"script"}